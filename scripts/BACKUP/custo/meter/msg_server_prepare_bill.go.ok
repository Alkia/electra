package keeper
/*
type Customerbillingline struct {
	CustomerdeviceID string `protobuf:"bytes,1,opt,name=customerdeviceID,proto3" json:"customerdeviceID,omitempty"`
	CycleID          uint64 `protobuf:"varint,2,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Lineid           uint64 `protobuf:"varint,3,opt,name=lineid,proto3" json:"lineid,omitempty"`
	ProducerDeviceID string `protobuf:"bytes,4,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
	BillContractID   string `protobuf:"bytes,5,opt,name=billContractID,proto3" json:"billContractID,omitempty"`
	LineWh           uint64 `protobuf:"varint,6,opt,name=lineWh,proto3" json:"lineWh,omitempty"`
	LineWhPrice      uint64 `protobuf:"varint,7,opt,name=lineWhPrice,proto3" json:"lineWhPrice,omitempty"`
	Curency          string `protobuf:"bytes,8,opt,name=curency,proto3" json:"curency,omitempty"`
	Decremented      uint64 `protobuf:"varint,9,opt,name=decremented,proto3" json:"decremented,omitempty"`
	Phase            uint64 `protobuf:"varint,10,opt,name=phase,proto3" json:"phase,omitempty"`
	Creator          string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}
func (m *Customerbillingline) Marshal() (dAtA []byte, err error)
func (m *Customerbillingline) Size() (n int) 

type Producerbillingline struct {
	ProducerDeviceID string `protobuf:"bytes,1,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
	CycleID          uint64 `protobuf:"varint,2,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Lineid           uint64 `protobuf:"varint,3,opt,name=lineid,proto3" json:"lineid,omitempty"`
	CustomerdeviceID string `protobuf:"bytes,4,opt,name=customerdeviceID,proto3" json:"customerdeviceID,omitempty"`
	BillContractID   string `protobuf:"bytes,5,opt,name=billContractID,proto3" json:"billContractID,omitempty"`
	LineWh           uint64 `protobuf:"varint,6,opt,name=lineWh,proto3" json:"lineWh,omitempty"`
	LineWhPrice      uint64 `protobuf:"varint,7,opt,name=lineWhPrice,proto3" json:"lineWhPrice,omitempty"`
	Curency          string `protobuf:"bytes,8,opt,name=curency,proto3" json:"curency,omitempty"`
	Decremented      uint64 `protobuf:"varint,9,opt,name=decremented,proto3" json:"decremented,omitempty"`
	Phase            uint64 `protobuf:"varint,10,opt,name=phase,proto3" json:"phase,omitempty"`
	Creator          string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}
type PpaMap struct {
	ConsumerDeviceID   string `protobuf:"bytes,1,opt,name=consumerDeviceID,proto3" json:"consumerDeviceID,omitempty"`
	AgreementID        string `protobuf:"bytes,2,opt,name=agreementID,proto3" json:"agreementID,omitempty"`
	AgreementActive    bool   `protobuf:"varint,3,opt,name=agreementActive,proto3" json:"agreementActive,omitempty"`
	ContractID         string `protobuf:"bytes,4,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ProducerDeviceID   string `protobuf:"bytes,5,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
	AgreementStartDate uint64 `protobuf:"varint,6,opt,name=agreementStartDate,proto3" json:"agreementStartDate,omitempty"`
	AgreementEndDate   uint64 `protobuf:"varint,7,opt,name=agreementEndDate,proto3" json:"agreementEndDate,omitempty"`
	Creator            string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}
type PowerPurchaseContract struct {
	ContractID                    string `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ContractDeviceID              string `protobuf:"bytes,2,opt,name=contractDeviceID,proto3" json:"contractDeviceID,omitempty"`
	ContractName                  string `protobuf:"bytes,3,opt,name=contractName,proto3" json:"contractName,omitempty"`
	ContractActive                bool   `protobuf:"varint,4,opt,name=contractActive,proto3" json:"contractActive,omitempty"`
	ContractPhase                 uint64 `protobuf:"varint,5,opt,name=contractPhase,proto3" json:"contractPhase,omitempty"`
	ContractForAll                bool   `protobuf:"varint,6,opt,name=contractForAll,proto3" json:"contractForAll,omitempty"`
	ContractForAllPrice           uint64 `protobuf:"varint,7,opt,name=contractForAllPrice,proto3" json:"contractForAllPrice,omitempty"`
	ContractForAllCurency         string `protobuf:"bytes,8,opt,name=contractForAllCurency,proto3" json:"contractForAllCurency,omitempty"`
	ContractForAllActivePeriod    string `protobuf:"bytes,9,opt,name=contractForAllActivePeriod,proto3" json:"contractForAllActivePeriod,omitempty"`
	ContractPreferred             bool   `protobuf:"varint,10,opt,name=contractPreferred,proto3" json:"contractPreferred,omitempty"`
	ContractPreferredPrice        uint64 `protobuf:"varint,11,opt,name=contractPreferredPrice,proto3" json:"contractPreferredPrice,omitempty"`
	ContractPreferredActivePeriod string `protobuf:"bytes,12,opt,name=contractPreferredActivePeriod,proto3" json:"contractPreferredActivePeriod,omitempty"`
	ContractPreferredCurency      string `protobuf:"bytes,13,opt,name=contractPreferredCurency,proto3" json:"contractPreferredCurency,omitempty"`
	ContractStartDate             uint64 `protobuf:"varint,14,opt,name=contractStartDate,proto3" json:"contractStartDate,omitempty"`
	ContractEndDate               uint64 `protobuf:"varint,15,opt,name=contractEndDate,proto3" json:"contractEndDate,omitempty"`
	Phase1RemainingWh             uint64 `protobuf:"varint,16,opt,name=phase1RemainingWh,proto3" json:"phase1RemainingWh,omitempty"`
	Phase2RemainingWh             uint64 `protobuf:"varint,17,opt,name=phase2RemainingWh,proto3" json:"phase2RemainingWh,omitempty"`
	Phase3RemainingWh             uint64 `protobuf:"varint,18,opt,name=phase3RemainingWh,proto3" json:"phase3RemainingWh,omitempty"`
	Creator                       string `protobuf:"bytes,19,opt,name=creator,proto3" json:"creator,omitempty"`
}
type Meterreadings struct {
	DeviceID  string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Phase     uint64 `protobuf:"varint,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Whin      uint64 `protobuf:"varint,4,opt,name=whin,proto3" json:"whin,omitempty"`
	Whout     uint64 `protobuf:"varint,5,opt,name=whout,proto3" json:"whout,omitempty"`
	Mvolt     uint64 `protobuf:"varint,6,opt,name=mvolt,proto3" json:"mvolt,omitempty"`
	Mhertz    uint64 `protobuf:"varint,7,opt,name=mhertz,proto3" json:"mhertz,omitempty"`
	Mpf       uint64 `protobuf:"varint,8,opt,name=mpf,proto3" json:"mpf,omitempty"`
	Maxmi     uint64 `protobuf:"varint,9,opt,name=maxmi,proto3" json:"maxmi,omitempty"`
}
electrad query meter  currentcycle-id
# electrad tx meter prepare-bill [cycle-id] [record]
electrad tx meter prepare-bill 77 false --from bob -y
*/

import (
	"context"
	"fmt"
	"encoding/json"
	"time"

	"electra/x/meter/types"
	"github.com/cosmos/cosmos-sdk/store/prefix"
	sdk "github.com/cosmos/cosmos-sdk/types"
)

type meterReading struct {
	whphase1		uint64
	whphase2 		uint64
	whphase3		uint64
}

/* Reading from the blockchain
func loadCurrentBillingValuesIN(ConsumeIn map[string]meterReading) {   
	var mr meterReading 
	mr.whphase1 = 0
	mr.whphase2 = 0 
	mr.whphase3 = 0	 
    ConsumeIn["cosmos12lhecv88myvrmgv92syj782dxjfsnjjgdjvgha"] = mr    // indexed insertion
	mr.whphase1 = 900
    ConsumeIn["cosmos12r6lx69zfef6ht3fk7drm9f5222qk4urx0u9hp"] = mr		// 900
	mr.whphase1 = 0
	ConsumeIn["cosmos19mhfyxz7532gumtyw5zrq00qv23mqtc4ajxde8"] = mr		// 0	
	mr.whphase1 = 5800
	ConsumeIn["cosmos16n5tnkck6rcg7gxmalc057daputvac5p7lheyx"] = mr		// 800 // alice
	mr.whphase1 = 1100
	ConsumeIn["cosmos1krkk5xtp8s7lk9xf2az70txle50zfzgazqnnua"] = mr		// 1100

	type Meterreadings struct {
	DeviceID  string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Phase     uint64 `protobuf:"varint,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Whin      uint64 `protobuf:"varint,4,opt,name=whin,proto3" json:"whin,omitempty"`
	Whout     uint64 `protobuf:"varint,5,opt,name=whout,proto3" json:"whout,omitempty"`
	Mvolt     uint64 `protobuf:"varint,6,opt,name=mvolt,proto3" json:"mvolt,omitempty"`
	Mhertz    uint64 `protobuf:"varint,7,opt,name=mhertz,proto3" json:"mhertz,omitempty"`
	Mpf       uint64 `protobuf:"varint,8,opt,name=mpf,proto3" json:"mpf,omitempty"`
	Maxmi     uint64 `protobuf:"varint,9,opt,name=maxmi,proto3" json:"maxmi,omitempty"`
}
// GetAllMeterreadings returns all meterreadings
func (k Keeper) GetAllMeterreadings(ctx sdk.Context) (list []types.Meterreadings) {
	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.MeterreadingsKeyPrefix))
	iterator := sdk.KVStorePrefixIterator(store, []byte{})
	defer iterator.Close()
	for ; iterator.Valid(); iterator.Next() {
		var val types.Meterreadings
		k.cdc.MustUnmarshal(iterator.Value(), &val)
		list = append(list, val)
	}
	return
}
}
type Billingcycles struct {
	CycleID  uint64 `protobuf:"varint,1,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Start    uint64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End      uint64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Whin     uint64 `protobuf:"varint,4,opt,name=whin,proto3" json:"whin,omitempty"`
	Whout    uint64 `protobuf:"varint,5,opt,name=whout,proto3" json:"whout,omitempty"`
	Moneyin  uint64 `protobuf:"varint,6,opt,name=moneyin,proto3" json:"moneyin,omitempty"`
	Moneyout uint64 `protobuf:"varint,7,opt,name=moneyout,proto3" json:"moneyout,omitempty"`
	Curency  string `protobuf:"bytes,8,opt,name=curency,proto3" json:"curency,omitempty"`
	Creator  string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}
*/
// Reading from the blockchain
func (k Keeper) loadAndUpdateProsumerBilledList(ctx sdk.Context)(map[string]uint64, map[string]uint64, error) {
	// Load 
	//
}


// Reading from the blockchain
func (k Keeper) loadMeterReadingValues(ctx sdk.Context, cycleID uint64, timestart uint64, timeend uint64)(map[string]meterReading, map[string]meterReading, error) {   
	// Choose the parameter depending if cycleID is specified (Has Priority)
		if (cycleID>0){													// Find the cycle start and end timestamps
			theCycle, _ := k.GetBillingcycles(ctx, cycleID)
			timestart = theCycle.Start
			timeend = theCycle.End
		} else {   			 								
			if (timestart < 1665916425) || (timeend < 1665916425) { 	// Sun Oct 16 2022
																		// Throw Error
				stErr := "ERROR loadMeterReadingValues: cycleID not set and (timestart < 1665916425) || (timeend < 1665916425)"
				writelog(stErr)
			} else {
																		// Continue witht the func parameters  timestart, timeend
			}
		} 
	var	consumeInn map[string]meterReading = make(map[string]meterReading)
	var produceOut map[string]meterReading = make(map[string]meterReading)
	/* DEBUG 
	comment := fmt.Sprintf("the Cycle: %d Start:%d End:%d\n", cycleID, timestart, timeend)
	writelog(comment)
	var i=0	
	i++ */
	// Start gathering data from the blockchain
	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.MeterreadingsKeyPrefix))
	iterator := sdk.KVStorePrefixIterator(store, []byte{})
	defer iterator.Close()
	for ; iterator.Valid(); iterator.Next() {
		var val types.Meterreadings								// The original format on the block chain
		var mrInn meterReading  
		var mrOUT meterReading 									// To save memory usage we use this type that is far more compact
		mrInn.whphase1 = 0
		mrInn.whphase2 = 0 
		mrInn.whphase3 = 0	
		mrOUT.whphase1 = 0
		mrOUT.whphase2 = 0 
		mrOUT.whphase3 = 0	
		k.cdc.MustUnmarshal(iterator.Value(), &val)
		if ((val.Timestamp >= timestart) && (val.Timestamp <= timeend)) {
			//list = append(list, val)
			switch val.Phase {
				case 1: {
					mrInn.whphase1 = val.Whin
					mrOUT.whphase1 = val.Whout
				} 
				case 2: {
					mrInn.whphase2 = val.Whin
					mrOUT.whphase2 = val.Whout
				} 
				case 3: {
					mrInn.whphase3 = val.Whin
					mrOUT.whphase3 = val.Whout
				} 
			}
			consumeInn[val.DeviceID] = mrInn
			produceOut[val.DeviceID] = mrOUT
			/* DEBUG 
			comment := fmt.Sprintf("cycleID:%d iter:%d Phase:%d IN:%d OUT:%d\n", cycleID, i, val.Phase, val.Whin, val.Whout )
			writelog(comment)
			i++ */
		}
	}
	return consumeInn, produceOut, nil
}

func (k msgServer) makePrepareBill(goCtx context.Context, CycleID uint64)(Customerbills []types.Customerbillingline, Producerbills []types.Producerbillingline, comment string, err error){
		// Constants
		const moduleParamBestForCustomer = true 													// Select the best price for the customer or for the producer
		const maxBillingIteration = 16 																//
			//phase := uint64(1) 																			// In next versions would have to loop the 3 phases
			//currency := "uelectra"																		// TO DO: Set as module parameter for each chain
			// Local variables	
			//var currentbillCycleID uint64 = CycleID													// For test purposes only
			//var currentbillID uint64 = CycleID														// For test purposes only
			//var remainsToDecrement, decremented uint64
			//var consumedWh uint64 = 0	
		// Performance Management
		start := time.Now()
		// CycleID definitions
		PreviousCycleID := CycleID
		PreviousCycleID--								// Decrement the current cycle ID to get the previous
		writelog("")
		comment += fmt.Sprintf("CycleID: %d  Previous CycleID: %d\n", CycleID, PreviousCycleID)
		ctx := sdk.UnwrapSDKContext(goCtx)
		var ppcList []types.PowerPurchaseContract = k.GetAllPowerPurchaseContract(ctx)  	// from x/meter/keeper/power_purchase_contract.go
		var ppaList []types.PpaMap = k.GetAllPpaMap(ctx)   // from x/meter/keeper/ppa_map.go GetAllPpaMap returns all ppaMap  func (k Keeper) GetAllPpaMap(ctx sdk.Context) (list []types.PpaMap)

		/* Audit
			comment += "============= PPC ================\n"
			for _, element := range ppcList{
				comment += fmt.Sprintf("PPC: %s %s\n",element.ContractID,element.ContractName)
			}
			comment += "============= PPA ================\n"
			for _, element := range ppaList{
				comment += fmt.Sprintf("ppa: %s Con:%s Prd:%s CID:%s\n",element.AgreementID, element.ConsumerDeviceID, element.ProducerDeviceID, element.ContractID)
			}
			writelog(comment)
			comment = ""
		*/

		// Curent Cycle // Load Current Meter Reading Values // 
		currentConsumeInMap, currentProduceOutMap, err := k.loadMeterReadingValues(ctx,CycleID,0,0)
		
		// Previous Cycle // Load Previous Meter Reading Values 
		previousCycleConsumeInMap, previousCycleProduceOutMap, err := k.loadMeterReadingValues(ctx,PreviousCycleID,0,0)

		/* Audit */
		comment += "============= currentConsumeInMap ================\n"
		for key, element := range currentConsumeInMap{
			comment += fmt.Sprintf("currentConsumeInMap: %s IN:%d\n",key,element.whphase1)
		}
		comment += "============= currentProduceOutMap ================\n"
		for key, element := range currentProduceOutMap{
			comment += fmt.Sprintf("currentProduceOutMap: %s OUT:%d\n",key,element.whphase1)
		}
		comment += "============= previousCycleConsumeInMap ================\n"
		for key, element := range previousCycleConsumeInMap{
			comment += fmt.Sprintf("previousCycleConsumeInMap: %s IN:%d\n",key,element.whphase1)
		}
		comment += "============= previousCycleProduceOutMap ================\n"
		for key, element := range previousCycleProduceOutMap{
			comment += fmt.Sprintf("previousCycleProduceOutMap: %s OUT:%d\n",key,element.whphase1)
		}
		// Define and update the list of customers
		/**/
		elapsed := time.Since(start)
		comment += fmt.Sprintf("Search took %s\n", elapsed)
		writelog(comment)
	return Customerbills, Producerbills, comment, err
}

//  INPUT : string creator = 1; uint64 cycleID = 2;  bool record = 3;
//
//  OUTPUT : string jsonBill = 1; string comment = 2;
//
func (k msgServer) PrepareBill(goCtx context.Context, msg *types.MsgPrepareBill) (*types.MsgPrepareBillResponse, error) {			
	var jsonBill string = "" 
	//var customerbills []types.Customerbillingline
	//var producerbills []types.Producerbillingline
	// var err error
	// TODO: Handling the message

	customerbills, producerbills, comment, err := k.makePrepareBill(goCtx, msg.CycleID)
	if err != nil {
        fmt.Printf("Error: %s", err.Error())
    }
	jsonBill1, err := json.Marshal(customerbills)
	if err != nil {
        fmt.Printf("Error: %s", err.Error())
    }
	jsonBill2, err := json.Marshal(producerbills)
	if err != nil {
        fmt.Printf("Error: %s", err.Error())
    }
	jsonBill = string(jsonBill1) + string(jsonBill2)

	if (msg.Record == true) {					// Record the bill on the chain

	}
	return &types.MsgPrepareBillResponse{JsonBill: jsonBill, Comment: comment}, nil
}
