package keeper

import (
	"context"
	"time"
	"fmt"
	"electra/x/meter/types"
	"github.com/cosmos/cosmos-sdk/store/prefix"
	"github.com/cosmos/cosmos-sdk/types/query"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func (k Keeper) Producerbill(goCtx context.Context, req *types.QueryProducerbillRequest) (*types.QueryProducerbillResponse, error) {
	if req == nil {
		return nil, status.Error(codes.InvalidArgument, "invalid request")
	}
	// Done: Process the query
	// Performance Management
	start := time.Now()
	var producerbilllines []types.Producerbills
	var nblines uint64 = 0
	var billTotalWh, billTotalPrice uint64 = 0 ,0 
	var stDebug string = ""

	ctx := sdk.UnwrapSDKContext(goCtx)
	store := ctx.KVStore(k.storeKey)
	producerbillsStore := prefix.NewStore(store, types.KeyPrefix(types.ProducerbillsKeyPrefix))

	pageRes, err := query.Paginate(producerbillsStore, req.Pagination, func(key []byte, value []byte) error {
		var producerbillline types.Producerbills
		if err := k.cdc.Unmarshal(value, &producerbillline); err != nil {
			return err
		}	
		if (req.ProducerdeviceID  == producerbillline.ProducerdeviceID) && (uint64(producerbillline.CycleID) == uint64(req.BillCycleID))  {
			producerbilllines = append(producerbilllines, customerbillingline)
			billTotalWh 	+= customerbillingline.LineWh          
			billTotalPrice 	+= customerbillingline.LineWhPrice 
			nblines++
		}
		return nil
	})

	if err != nil {
		return nil, status.Error(codes.Internal, err.Error())
	}

	elapsed := time.Since(start)
	stDebug = fmt.Sprintf("Search took %s", elapsed)
	return &types.QueryProducerbillResponse{Producerbillingline:producerbilllines, BillTotalWh: billTotalWh, BillTotalPrice: billTotalPrice, Nblines: nblines, Comments: stDebug, Pagination: pageRes}, nil
}
