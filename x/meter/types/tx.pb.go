// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: electra/meter/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRecord struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Phase     uint64 `protobuf:"varint,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Whin      uint64 `protobuf:"varint,4,opt,name=whin,proto3" json:"whin,omitempty"`
	Whout     uint64 `protobuf:"varint,5,opt,name=whout,proto3" json:"whout,omitempty"`
	Mvolt     uint64 `protobuf:"varint,6,opt,name=mvolt,proto3" json:"mvolt,omitempty"`
	Mhertz    uint64 `protobuf:"varint,7,opt,name=mhertz,proto3" json:"mhertz,omitempty"`
	Mpf       uint64 `protobuf:"varint,8,opt,name=mpf,proto3" json:"mpf,omitempty"`
	Maxmi     uint64 `protobuf:"varint,9,opt,name=maxmi,proto3" json:"maxmi,omitempty"`
}

func (m *MsgRecord) Reset()         { *m = MsgRecord{} }
func (m *MsgRecord) String() string { return proto.CompactTextString(m) }
func (*MsgRecord) ProtoMessage()    {}
func (*MsgRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{0}
}
func (m *MsgRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecord.Merge(m, src)
}
func (m *MsgRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecord proto.InternalMessageInfo

func (m *MsgRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRecord) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgRecord) GetPhase() uint64 {
	if m != nil {
		return m.Phase
	}
	return 0
}

func (m *MsgRecord) GetWhin() uint64 {
	if m != nil {
		return m.Whin
	}
	return 0
}

func (m *MsgRecord) GetWhout() uint64 {
	if m != nil {
		return m.Whout
	}
	return 0
}

func (m *MsgRecord) GetMvolt() uint64 {
	if m != nil {
		return m.Mvolt
	}
	return 0
}

func (m *MsgRecord) GetMhertz() uint64 {
	if m != nil {
		return m.Mhertz
	}
	return 0
}

func (m *MsgRecord) GetMpf() uint64 {
	if m != nil {
		return m.Mpf
	}
	return 0
}

func (m *MsgRecord) GetMaxmi() uint64 {
	if m != nil {
		return m.Maxmi
	}
	return 0
}

type MsgRecordResponse struct {
}

func (m *MsgRecordResponse) Reset()         { *m = MsgRecordResponse{} }
func (m *MsgRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordResponse) ProtoMessage()    {}
func (*MsgRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{1}
}
func (m *MsgRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordResponse.Merge(m, src)
}
func (m *MsgRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordResponse proto.InternalMessageInfo

type MsgRecord3 struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Whin1     uint64 `protobuf:"varint,3,opt,name=whin1,proto3" json:"whin1,omitempty"`
	Whout1    uint64 `protobuf:"varint,4,opt,name=whout1,proto3" json:"whout1,omitempty"`
	Mvolt1    uint64 `protobuf:"varint,5,opt,name=mvolt1,proto3" json:"mvolt1,omitempty"`
	Mhertz1   uint64 `protobuf:"varint,6,opt,name=mhertz1,proto3" json:"mhertz1,omitempty"`
	Mpf1      uint64 `protobuf:"varint,7,opt,name=mpf1,proto3" json:"mpf1,omitempty"`
	Maxmi1    uint64 `protobuf:"varint,8,opt,name=maxmi1,proto3" json:"maxmi1,omitempty"`
	Whin2     uint64 `protobuf:"varint,9,opt,name=whin2,proto3" json:"whin2,omitempty"`
	Whout2    uint64 `protobuf:"varint,10,opt,name=whout2,proto3" json:"whout2,omitempty"`
	Mvolt2    uint64 `protobuf:"varint,11,opt,name=mvolt2,proto3" json:"mvolt2,omitempty"`
	Mhertz2   uint64 `protobuf:"varint,12,opt,name=mhertz2,proto3" json:"mhertz2,omitempty"`
	Mpf2      uint64 `protobuf:"varint,13,opt,name=mpf2,proto3" json:"mpf2,omitempty"`
	Maxmi2    uint64 `protobuf:"varint,14,opt,name=maxmi2,proto3" json:"maxmi2,omitempty"`
	Whin3     uint64 `protobuf:"varint,15,opt,name=whin3,proto3" json:"whin3,omitempty"`
	Whout3    uint64 `protobuf:"varint,16,opt,name=whout3,proto3" json:"whout3,omitempty"`
	Mvolt3    uint64 `protobuf:"varint,17,opt,name=mvolt3,proto3" json:"mvolt3,omitempty"`
	Mhertz3   uint64 `protobuf:"varint,18,opt,name=mhertz3,proto3" json:"mhertz3,omitempty"`
	Mpf3      uint64 `protobuf:"varint,19,opt,name=mpf3,proto3" json:"mpf3,omitempty"`
	Maxmi3    uint64 `protobuf:"varint,20,opt,name=maxmi3,proto3" json:"maxmi3,omitempty"`
}

func (m *MsgRecord3) Reset()         { *m = MsgRecord3{} }
func (m *MsgRecord3) String() string { return proto.CompactTextString(m) }
func (*MsgRecord3) ProtoMessage()    {}
func (*MsgRecord3) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{2}
}
func (m *MsgRecord3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecord3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecord3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecord3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecord3.Merge(m, src)
}
func (m *MsgRecord3) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecord3) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecord3.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecord3 proto.InternalMessageInfo

func (m *MsgRecord3) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRecord3) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgRecord3) GetWhin1() uint64 {
	if m != nil {
		return m.Whin1
	}
	return 0
}

func (m *MsgRecord3) GetWhout1() uint64 {
	if m != nil {
		return m.Whout1
	}
	return 0
}

func (m *MsgRecord3) GetMvolt1() uint64 {
	if m != nil {
		return m.Mvolt1
	}
	return 0
}

func (m *MsgRecord3) GetMhertz1() uint64 {
	if m != nil {
		return m.Mhertz1
	}
	return 0
}

func (m *MsgRecord3) GetMpf1() uint64 {
	if m != nil {
		return m.Mpf1
	}
	return 0
}

func (m *MsgRecord3) GetMaxmi1() uint64 {
	if m != nil {
		return m.Maxmi1
	}
	return 0
}

func (m *MsgRecord3) GetWhin2() uint64 {
	if m != nil {
		return m.Whin2
	}
	return 0
}

func (m *MsgRecord3) GetWhout2() uint64 {
	if m != nil {
		return m.Whout2
	}
	return 0
}

func (m *MsgRecord3) GetMvolt2() uint64 {
	if m != nil {
		return m.Mvolt2
	}
	return 0
}

func (m *MsgRecord3) GetMhertz2() uint64 {
	if m != nil {
		return m.Mhertz2
	}
	return 0
}

func (m *MsgRecord3) GetMpf2() uint64 {
	if m != nil {
		return m.Mpf2
	}
	return 0
}

func (m *MsgRecord3) GetMaxmi2() uint64 {
	if m != nil {
		return m.Maxmi2
	}
	return 0
}

func (m *MsgRecord3) GetWhin3() uint64 {
	if m != nil {
		return m.Whin3
	}
	return 0
}

func (m *MsgRecord3) GetWhout3() uint64 {
	if m != nil {
		return m.Whout3
	}
	return 0
}

func (m *MsgRecord3) GetMvolt3() uint64 {
	if m != nil {
		return m.Mvolt3
	}
	return 0
}

func (m *MsgRecord3) GetMhertz3() uint64 {
	if m != nil {
		return m.Mhertz3
	}
	return 0
}

func (m *MsgRecord3) GetMpf3() uint64 {
	if m != nil {
		return m.Mpf3
	}
	return 0
}

func (m *MsgRecord3) GetMaxmi3() uint64 {
	if m != nil {
		return m.Maxmi3
	}
	return 0
}

type MsgRecord3Response struct {
}

func (m *MsgRecord3Response) Reset()         { *m = MsgRecord3Response{} }
func (m *MsgRecord3Response) String() string { return proto.CompactTextString(m) }
func (*MsgRecord3Response) ProtoMessage()    {}
func (*MsgRecord3Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{3}
}
func (m *MsgRecord3Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecord3Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecord3Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecord3Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecord3Response.Merge(m, src)
}
func (m *MsgRecord3Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecord3Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecord3Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecord3Response proto.InternalMessageInfo

type MsgCreatePowerPurchaseContract struct {
	Creator                       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractID                    string `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ContractDeviceID              string `protobuf:"bytes,3,opt,name=contractDeviceID,proto3" json:"contractDeviceID,omitempty"`
	ContractName                  string `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`
	ContractActive                bool   `protobuf:"varint,5,opt,name=contractActive,proto3" json:"contractActive,omitempty"`
	ContractPhase                 uint64 `protobuf:"varint,6,opt,name=contractPhase,proto3" json:"contractPhase,omitempty"`
	ContractForAll                bool   `protobuf:"varint,7,opt,name=contractForAll,proto3" json:"contractForAll,omitempty"`
	ContractForAllPrice           uint64 `protobuf:"varint,8,opt,name=contractForAllPrice,proto3" json:"contractForAllPrice,omitempty"`
	ContractForAllCurency         string `protobuf:"bytes,9,opt,name=contractForAllCurency,proto3" json:"contractForAllCurency,omitempty"`
	ContractForAllActivePeriod    string `protobuf:"bytes,10,opt,name=contractForAllActivePeriod,proto3" json:"contractForAllActivePeriod,omitempty"`
	ContractPreferred             bool   `protobuf:"varint,11,opt,name=contractPreferred,proto3" json:"contractPreferred,omitempty"`
	ContractPreferredPrice        uint64 `protobuf:"varint,12,opt,name=contractPreferredPrice,proto3" json:"contractPreferredPrice,omitempty"`
	ContractPreferredActivePeriod string `protobuf:"bytes,13,opt,name=contractPreferredActivePeriod,proto3" json:"contractPreferredActivePeriod,omitempty"`
	ContractPreferredCurency      string `protobuf:"bytes,14,opt,name=contractPreferredCurency,proto3" json:"contractPreferredCurency,omitempty"`
	ContractStartDate             uint64 `protobuf:"varint,15,opt,name=contractStartDate,proto3" json:"contractStartDate,omitempty"`
	ContractEndDate               uint64 `protobuf:"varint,16,opt,name=contractEndDate,proto3" json:"contractEndDate,omitempty"`
	Phase1RemainingWh             uint64 `protobuf:"varint,17,opt,name=phase1RemainingWh,proto3" json:"phase1RemainingWh,omitempty"`
	Phase2RemainingWh             uint64 `protobuf:"varint,18,opt,name=phase2RemainingWh,proto3" json:"phase2RemainingWh,omitempty"`
	Phase3RemainingWh             uint64 `protobuf:"varint,19,opt,name=phase3RemainingWh,proto3" json:"phase3RemainingWh,omitempty"`
}

func (m *MsgCreatePowerPurchaseContract) Reset()         { *m = MsgCreatePowerPurchaseContract{} }
func (m *MsgCreatePowerPurchaseContract) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePowerPurchaseContract) ProtoMessage()    {}
func (*MsgCreatePowerPurchaseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{4}
}
func (m *MsgCreatePowerPurchaseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePowerPurchaseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePowerPurchaseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePowerPurchaseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePowerPurchaseContract.Merge(m, src)
}
func (m *MsgCreatePowerPurchaseContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePowerPurchaseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePowerPurchaseContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePowerPurchaseContract proto.InternalMessageInfo

func (m *MsgCreatePowerPurchaseContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractDeviceID() string {
	if m != nil {
		return m.ContractDeviceID
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractActive() bool {
	if m != nil {
		return m.ContractActive
	}
	return false
}

func (m *MsgCreatePowerPurchaseContract) GetContractPhase() uint64 {
	if m != nil {
		return m.ContractPhase
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetContractForAll() bool {
	if m != nil {
		return m.ContractForAll
	}
	return false
}

func (m *MsgCreatePowerPurchaseContract) GetContractForAllPrice() uint64 {
	if m != nil {
		return m.ContractForAllPrice
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetContractForAllCurency() string {
	if m != nil {
		return m.ContractForAllCurency
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractForAllActivePeriod() string {
	if m != nil {
		return m.ContractForAllActivePeriod
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractPreferred() bool {
	if m != nil {
		return m.ContractPreferred
	}
	return false
}

func (m *MsgCreatePowerPurchaseContract) GetContractPreferredPrice() uint64 {
	if m != nil {
		return m.ContractPreferredPrice
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetContractPreferredActivePeriod() string {
	if m != nil {
		return m.ContractPreferredActivePeriod
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractPreferredCurency() string {
	if m != nil {
		return m.ContractPreferredCurency
	}
	return ""
}

func (m *MsgCreatePowerPurchaseContract) GetContractStartDate() uint64 {
	if m != nil {
		return m.ContractStartDate
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetContractEndDate() uint64 {
	if m != nil {
		return m.ContractEndDate
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetPhase1RemainingWh() uint64 {
	if m != nil {
		return m.Phase1RemainingWh
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetPhase2RemainingWh() uint64 {
	if m != nil {
		return m.Phase2RemainingWh
	}
	return 0
}

func (m *MsgCreatePowerPurchaseContract) GetPhase3RemainingWh() uint64 {
	if m != nil {
		return m.Phase3RemainingWh
	}
	return 0
}

type MsgCreatePowerPurchaseContractResponse struct {
}

func (m *MsgCreatePowerPurchaseContractResponse) Reset() {
	*m = MsgCreatePowerPurchaseContractResponse{}
}
func (m *MsgCreatePowerPurchaseContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePowerPurchaseContractResponse) ProtoMessage()    {}
func (*MsgCreatePowerPurchaseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{5}
}
func (m *MsgCreatePowerPurchaseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePowerPurchaseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePowerPurchaseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePowerPurchaseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePowerPurchaseContractResponse.Merge(m, src)
}
func (m *MsgCreatePowerPurchaseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePowerPurchaseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePowerPurchaseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePowerPurchaseContractResponse proto.InternalMessageInfo

type MsgUpdatePowerPurchaseContract struct {
	Creator                       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractID                    string `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ContractDeviceID              string `protobuf:"bytes,3,opt,name=contractDeviceID,proto3" json:"contractDeviceID,omitempty"`
	ContractName                  string `protobuf:"bytes,4,opt,name=contractName,proto3" json:"contractName,omitempty"`
	ContractActive                bool   `protobuf:"varint,5,opt,name=contractActive,proto3" json:"contractActive,omitempty"`
	ContractPhase                 uint64 `protobuf:"varint,6,opt,name=contractPhase,proto3" json:"contractPhase,omitempty"`
	ContractForAll                bool   `protobuf:"varint,7,opt,name=contractForAll,proto3" json:"contractForAll,omitempty"`
	ContractForAllPrice           uint64 `protobuf:"varint,8,opt,name=contractForAllPrice,proto3" json:"contractForAllPrice,omitempty"`
	ContractForAllCurency         string `protobuf:"bytes,9,opt,name=contractForAllCurency,proto3" json:"contractForAllCurency,omitempty"`
	ContractForAllActivePeriod    string `protobuf:"bytes,10,opt,name=contractForAllActivePeriod,proto3" json:"contractForAllActivePeriod,omitempty"`
	ContractPreferred             bool   `protobuf:"varint,11,opt,name=contractPreferred,proto3" json:"contractPreferred,omitempty"`
	ContractPreferredPrice        uint64 `protobuf:"varint,12,opt,name=contractPreferredPrice,proto3" json:"contractPreferredPrice,omitempty"`
	ContractPreferredActivePeriod string `protobuf:"bytes,13,opt,name=contractPreferredActivePeriod,proto3" json:"contractPreferredActivePeriod,omitempty"`
	ContractPreferredCurency      string `protobuf:"bytes,14,opt,name=contractPreferredCurency,proto3" json:"contractPreferredCurency,omitempty"`
	ContractStartDate             uint64 `protobuf:"varint,15,opt,name=contractStartDate,proto3" json:"contractStartDate,omitempty"`
	ContractEndDate               uint64 `protobuf:"varint,16,opt,name=contractEndDate,proto3" json:"contractEndDate,omitempty"`
	Phase1RemainingWh             uint64 `protobuf:"varint,17,opt,name=phase1RemainingWh,proto3" json:"phase1RemainingWh,omitempty"`
	Phase2RemainingWh             uint64 `protobuf:"varint,18,opt,name=phase2RemainingWh,proto3" json:"phase2RemainingWh,omitempty"`
	Phase3RemainingWh             uint64 `protobuf:"varint,19,opt,name=phase3RemainingWh,proto3" json:"phase3RemainingWh,omitempty"`
}

func (m *MsgUpdatePowerPurchaseContract) Reset()         { *m = MsgUpdatePowerPurchaseContract{} }
func (m *MsgUpdatePowerPurchaseContract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePowerPurchaseContract) ProtoMessage()    {}
func (*MsgUpdatePowerPurchaseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{6}
}
func (m *MsgUpdatePowerPurchaseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePowerPurchaseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePowerPurchaseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePowerPurchaseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePowerPurchaseContract.Merge(m, src)
}
func (m *MsgUpdatePowerPurchaseContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePowerPurchaseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePowerPurchaseContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePowerPurchaseContract proto.InternalMessageInfo

func (m *MsgUpdatePowerPurchaseContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractDeviceID() string {
	if m != nil {
		return m.ContractDeviceID
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractActive() bool {
	if m != nil {
		return m.ContractActive
	}
	return false
}

func (m *MsgUpdatePowerPurchaseContract) GetContractPhase() uint64 {
	if m != nil {
		return m.ContractPhase
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetContractForAll() bool {
	if m != nil {
		return m.ContractForAll
	}
	return false
}

func (m *MsgUpdatePowerPurchaseContract) GetContractForAllPrice() uint64 {
	if m != nil {
		return m.ContractForAllPrice
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetContractForAllCurency() string {
	if m != nil {
		return m.ContractForAllCurency
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractForAllActivePeriod() string {
	if m != nil {
		return m.ContractForAllActivePeriod
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractPreferred() bool {
	if m != nil {
		return m.ContractPreferred
	}
	return false
}

func (m *MsgUpdatePowerPurchaseContract) GetContractPreferredPrice() uint64 {
	if m != nil {
		return m.ContractPreferredPrice
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetContractPreferredActivePeriod() string {
	if m != nil {
		return m.ContractPreferredActivePeriod
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractPreferredCurency() string {
	if m != nil {
		return m.ContractPreferredCurency
	}
	return ""
}

func (m *MsgUpdatePowerPurchaseContract) GetContractStartDate() uint64 {
	if m != nil {
		return m.ContractStartDate
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetContractEndDate() uint64 {
	if m != nil {
		return m.ContractEndDate
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetPhase1RemainingWh() uint64 {
	if m != nil {
		return m.Phase1RemainingWh
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetPhase2RemainingWh() uint64 {
	if m != nil {
		return m.Phase2RemainingWh
	}
	return 0
}

func (m *MsgUpdatePowerPurchaseContract) GetPhase3RemainingWh() uint64 {
	if m != nil {
		return m.Phase3RemainingWh
	}
	return 0
}

type MsgUpdatePowerPurchaseContractResponse struct {
}

func (m *MsgUpdatePowerPurchaseContractResponse) Reset() {
	*m = MsgUpdatePowerPurchaseContractResponse{}
}
func (m *MsgUpdatePowerPurchaseContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePowerPurchaseContractResponse) ProtoMessage()    {}
func (*MsgUpdatePowerPurchaseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{7}
}
func (m *MsgUpdatePowerPurchaseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePowerPurchaseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePowerPurchaseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePowerPurchaseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePowerPurchaseContractResponse.Merge(m, src)
}
func (m *MsgUpdatePowerPurchaseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePowerPurchaseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePowerPurchaseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePowerPurchaseContractResponse proto.InternalMessageInfo

type MsgDeletePowerPurchaseContract struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractID       string `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ContractDeviceID string `protobuf:"bytes,3,opt,name=contractDeviceID,proto3" json:"contractDeviceID,omitempty"`
}

func (m *MsgDeletePowerPurchaseContract) Reset()         { *m = MsgDeletePowerPurchaseContract{} }
func (m *MsgDeletePowerPurchaseContract) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePowerPurchaseContract) ProtoMessage()    {}
func (*MsgDeletePowerPurchaseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{8}
}
func (m *MsgDeletePowerPurchaseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePowerPurchaseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePowerPurchaseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePowerPurchaseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePowerPurchaseContract.Merge(m, src)
}
func (m *MsgDeletePowerPurchaseContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePowerPurchaseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePowerPurchaseContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePowerPurchaseContract proto.InternalMessageInfo

func (m *MsgDeletePowerPurchaseContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeletePowerPurchaseContract) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *MsgDeletePowerPurchaseContract) GetContractDeviceID() string {
	if m != nil {
		return m.ContractDeviceID
	}
	return ""
}

type MsgDeletePowerPurchaseContractResponse struct {
}

func (m *MsgDeletePowerPurchaseContractResponse) Reset() {
	*m = MsgDeletePowerPurchaseContractResponse{}
}
func (m *MsgDeletePowerPurchaseContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeletePowerPurchaseContractResponse) ProtoMessage()    {}
func (*MsgDeletePowerPurchaseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_687c50bdd23ff25e, []int{9}
}
func (m *MsgDeletePowerPurchaseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeletePowerPurchaseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeletePowerPurchaseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeletePowerPurchaseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeletePowerPurchaseContractResponse.Merge(m, src)
}
func (m *MsgDeletePowerPurchaseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeletePowerPurchaseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeletePowerPurchaseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeletePowerPurchaseContractResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecord)(nil), "electra.meter.MsgRecord")
	proto.RegisterType((*MsgRecordResponse)(nil), "electra.meter.MsgRecordResponse")
	proto.RegisterType((*MsgRecord3)(nil), "electra.meter.MsgRecord3")
	proto.RegisterType((*MsgRecord3Response)(nil), "electra.meter.MsgRecord3Response")
	proto.RegisterType((*MsgCreatePowerPurchaseContract)(nil), "electra.meter.MsgCreatePowerPurchaseContract")
	proto.RegisterType((*MsgCreatePowerPurchaseContractResponse)(nil), "electra.meter.MsgCreatePowerPurchaseContractResponse")
	proto.RegisterType((*MsgUpdatePowerPurchaseContract)(nil), "electra.meter.MsgUpdatePowerPurchaseContract")
	proto.RegisterType((*MsgUpdatePowerPurchaseContractResponse)(nil), "electra.meter.MsgUpdatePowerPurchaseContractResponse")
	proto.RegisterType((*MsgDeletePowerPurchaseContract)(nil), "electra.meter.MsgDeletePowerPurchaseContract")
	proto.RegisterType((*MsgDeletePowerPurchaseContractResponse)(nil), "electra.meter.MsgDeletePowerPurchaseContractResponse")
}

func init() { proto.RegisterFile("electra/meter/tx.proto", fileDescriptor_687c50bdd23ff25e) }

var fileDescriptor_687c50bdd23ff25e = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcb, 0x6e, 0xc3, 0x44,
	0x14, 0xad, 0x49, 0x9a, 0xd4, 0x97, 0xa6, 0x8f, 0x49, 0x5b, 0x0d, 0x01, 0xac, 0x12, 0xa1, 0x2a,
	0xe2, 0x91, 0x12, 0x0f, 0xb0, 0x60, 0x81, 0x54, 0x1a, 0x40, 0x5d, 0x14, 0x45, 0x46, 0x08, 0x89,
	0x4d, 0x65, 0x9c, 0x69, 0x62, 0x29, 0x8e, 0xad, 0xf1, 0xf4, 0xc5, 0x16, 0x89, 0x35, 0xe2, 0x23,
	0xf8, 0x16, 0x96, 0x5d, 0xc2, 0x0e, 0xb5, 0x1b, 0x3e, 0x03, 0x79, 0x3c, 0x33, 0x19, 0xd7, 0x89,
	0x55, 0xc4, 0x02, 0x16, 0xdd, 0xf9, 0x9e, 0x7b, 0x7c, 0x73, 0x4e, 0x7c, 0x8f, 0x35, 0x86, 0x03,
	0x3a, 0xa3, 0x01, 0x67, 0xfe, 0x71, 0x44, 0x39, 0x65, 0xc7, 0xfc, 0xb6, 0x9f, 0xb0, 0x98, 0xc7,
	0xa8, 0x25, 0xf1, 0xbe, 0xc0, 0x3b, 0xef, 0x16, 0x69, 0x49, 0x7c, 0x43, 0xd9, 0x45, 0x72, 0xc5,
	0x82, 0xa9, 0x9f, 0xd2, 0x8b, 0x20, 0x9e, 0x73, 0xe6, 0x07, 0x3c, 0xbf, 0xb7, 0xfb, 0x87, 0x05,
	0xf6, 0x79, 0x3a, 0xf1, 0x68, 0x10, 0xb3, 0x31, 0xc2, 0xd0, 0x0c, 0x18, 0xf5, 0x79, 0xcc, 0xb0,
	0x75, 0x68, 0xf5, 0x6c, 0x4f, 0x95, 0xe8, 0x0d, 0xb0, 0x79, 0x18, 0xd1, 0x94, 0xfb, 0x51, 0x82,
	0x5f, 0x39, 0xb4, 0x7a, 0x75, 0x6f, 0x01, 0xa0, 0x3d, 0x58, 0x4f, 0xb2, 0xe9, 0xb8, 0x26, 0x3a,
	0x79, 0x81, 0x10, 0xd4, 0x6f, 0xa6, 0xe1, 0x1c, 0xd7, 0x05, 0x28, 0xae, 0x33, 0xe6, 0xcd, 0x34,
	0xbe, 0xe2, 0x78, 0x3d, 0x67, 0x8a, 0x22, 0x43, 0xa3, 0xeb, 0x78, 0xc6, 0x71, 0x23, 0x47, 0x45,
	0x81, 0x0e, 0xa0, 0x11, 0x4d, 0x29, 0xe3, 0x3f, 0xe0, 0xa6, 0x80, 0x65, 0x85, 0x76, 0xa0, 0x16,
	0x25, 0x97, 0x78, 0x43, 0x80, 0xd9, 0xa5, 0xb8, 0xdf, 0xbf, 0x8d, 0x42, 0x6c, 0xcb, 0xfb, 0xb3,
	0xa2, 0xdb, 0x86, 0x5d, 0x6d, 0xcd, 0xa3, 0x69, 0x12, 0xcf, 0x53, 0xda, 0xfd, 0xab, 0x06, 0xa0,
	0x51, 0xf2, 0x6f, 0x1c, 0x67, 0x7e, 0x06, 0xca, 0xb1, 0x28, 0x32, 0xc5, 0xc2, 0xd0, 0x40, 0x7a,
	0x96, 0x95, 0x70, 0x92, 0x59, 0x1a, 0x48, 0xdb, 0xb2, 0xca, 0x7e, 0x3d, 0xf7, 0x34, 0x90, 0xce,
	0x55, 0x99, 0xfd, 0x77, 0x51, 0x72, 0x39, 0x90, 0xce, 0xc5, 0xb5, 0x98, 0x92, 0x19, 0x1b, 0x48,
	0xeb, 0xb2, 0x52, 0x5a, 0x5c, 0xe5, 0x5e, 0x14, 0x5a, 0x8b, 0x8b, 0xc1, 0xd0, 0xe2, 0x6a, 0x2d,
	0x2e, 0x7e, 0xd5, 0xd0, 0xe2, 0x2e, 0xb4, 0xb8, 0x78, 0xd3, 0xd4, 0xe2, 0x4a, 0x2d, 0x2e, 0x6e,
	0x69, 0x2d, 0xae, 0xd6, 0xe2, 0xe2, 0x2d, 0x43, 0x8b, 0xab, 0xb4, 0x10, 0xbc, 0xbd, 0xd0, 0x42,
	0xb4, 0x16, 0x82, 0x77, 0x0c, 0x2d, 0x44, 0x6b, 0x21, 0x78, 0xd7, 0xd0, 0x42, 0x16, 0x5a, 0x08,
	0x46, 0xa6, 0x16, 0x22, 0xb5, 0x10, 0xdc, 0xd6, 0x5a, 0x88, 0xd6, 0x42, 0xf0, 0x9e, 0xa1, 0x85,
	0x74, 0xf7, 0x00, 0x2d, 0x9e, 0xb4, 0x5e, 0x80, 0x5f, 0x9a, 0xe0, 0x9c, 0xa7, 0x93, 0xd3, 0xec,
	0x31, 0xd3, 0x51, 0x16, 0x8e, 0x91, 0xcc, 0xc6, 0xa9, 0x8c, 0x46, 0xc5, 0x52, 0x38, 0x00, 0x2a,
	0x40, 0x67, 0x43, 0xb1, 0x15, 0xb6, 0x67, 0x20, 0xe8, 0x1d, 0xd8, 0x51, 0xd5, 0x90, 0x5e, 0x87,
	0x01, 0x3d, 0x1b, 0x8a, 0x0d, 0xb1, 0xbd, 0x12, 0x8e, 0xba, 0xb0, 0xa9, 0xb0, 0xaf, 0xfc, 0x88,
	0x8a, 0x95, 0xb1, 0xbd, 0x02, 0x86, 0x8e, 0x60, 0x4b, 0xd5, 0x27, 0x01, 0x0f, 0xaf, 0xa9, 0x58,
	0xa0, 0x0d, 0xef, 0x09, 0x8a, 0xde, 0x86, 0x96, 0x42, 0x46, 0x22, 0x88, 0xf9, 0x3a, 0x15, 0x41,
	0x73, 0xda, 0x17, 0x31, 0x3b, 0x99, 0xcd, 0xc4, 0x7a, 0x19, 0xd3, 0x72, 0x14, 0x7d, 0x00, 0xed,
	0x22, 0x32, 0x62, 0x61, 0x40, 0xe5, 0xd6, 0x2d, 0x6b, 0xa1, 0x0f, 0x61, 0xbf, 0x08, 0x9f, 0x5e,
	0x31, 0x3a, 0x0f, 0xee, 0xc4, 0x4a, 0xda, 0xde, 0xf2, 0x26, 0xfa, 0x14, 0x3a, 0xc5, 0x46, 0xee,
	0x66, 0x44, 0x59, 0x18, 0x8f, 0xc5, 0xda, 0xda, 0x5e, 0x05, 0x03, 0xbd, 0x07, 0xbb, 0xda, 0x20,
	0xa3, 0x97, 0x94, 0x31, 0x3a, 0x16, 0x5b, 0xbd, 0xe1, 0x95, 0x1b, 0xe8, 0x63, 0x38, 0x28, 0x81,
	0xb9, 0xb1, 0x7c, 0xdf, 0x57, 0x74, 0xd1, 0x10, 0xde, 0x2c, 0x75, 0x0a, 0x42, 0x5b, 0x42, 0x68,
	0x35, 0x09, 0x7d, 0x02, 0xb8, 0x44, 0x50, 0x7f, 0xd2, 0x96, 0x18, 0xb0, 0xb2, 0x6f, 0xfa, 0xfc,
	0x9a, 0xfb, 0x8c, 0x0f, 0x7d, 0x4e, 0x65, 0xc0, 0xca, 0x0d, 0xd4, 0x83, 0x6d, 0x05, 0x7e, 0x3e,
	0x1f, 0x0b, 0x6e, 0x9e, 0xba, 0xa7, 0x70, 0x36, 0x57, 0xbc, 0xa9, 0x07, 0x1e, 0x8d, 0xfc, 0x70,
	0x1e, 0xce, 0x27, 0xdf, 0x4e, 0x65, 0x12, 0xcb, 0x0d, 0xcd, 0x76, 0x4d, 0x36, 0x32, 0xd8, 0xee,
	0x32, 0x36, 0x31, 0xd9, 0x6d, 0x83, 0x6d, 0x36, 0xba, 0x3d, 0x38, 0xaa, 0xce, 0xe4, 0xd3, 0xf8,
	0x7e, 0x93, 0x8c, 0x5f, 0xe2, 0xfb, 0x12, 0xdf, 0x97, 0xf8, 0xfe, 0x8f, 0xe2, 0x5b, 0x91, 0x49,
	0x1d, 0xdf, 0x9f, 0x2c, 0x11, 0xdf, 0x21, 0x9d, 0xd1, 0xff, 0x34, 0xbe, 0x52, 0x72, 0x85, 0x0e,
	0x25, 0xd9, 0xfd, 0xb5, 0x0e, 0xb5, 0xf3, 0x74, 0x82, 0x86, 0xd0, 0x50, 0xc7, 0xe4, 0x7e, 0xe1,
	0xc4, 0xdd, 0xd7, 0xa7, 0x8c, 0xce, 0xe1, 0xaa, 0x8e, 0x9a, 0x86, 0xbe, 0x84, 0xa6, 0x3a, 0x7b,
	0xbe, 0xb6, 0x8a, 0x4c, 0x3a, 0x6f, 0xad, 0x6c, 0xe9, 0x41, 0x3f, 0x5a, 0xf0, 0x7a, 0xd5, 0x21,
	0xe6, 0xfd, 0xf2, 0x88, 0x0a, 0x7a, 0xe7, 0xa3, 0x7f, 0x44, 0x2f, 0xa8, 0xa8, 0x7a, 0x17, 0x2f,
	0x51, 0x51, 0x41, 0x5f, 0xa6, 0xe2, 0x19, 0x5b, 0x25, 0x54, 0x54, 0xad, 0xd4, 0x12, 0x15, 0x15,
	0xf4, 0x65, 0x2a, 0x9e, 0xb1, 0x28, 0x9f, 0x1d, 0xff, 0xf6, 0xe0, 0x58, 0xf7, 0x0f, 0x8e, 0xf5,
	0xe7, 0x83, 0x63, 0xfd, 0xfc, 0xe8, 0xac, 0xdd, 0x3f, 0x3a, 0x6b, 0xbf, 0x3f, 0x3a, 0x6b, 0xdf,
	0xed, 0xab, 0x4f, 0xb2, 0x5b, 0xf5, 0xed, 0x76, 0x97, 0xd0, 0xf4, 0xfb, 0x86, 0xf8, 0x06, 0x23,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x16, 0xb7, 0x61, 0x1d, 0xd9, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Record(ctx context.Context, in *MsgRecord, opts ...grpc.CallOption) (*MsgRecordResponse, error)
	Record3(ctx context.Context, in *MsgRecord3, opts ...grpc.CallOption) (*MsgRecord3Response, error)
	CreatePowerPurchaseContract(ctx context.Context, in *MsgCreatePowerPurchaseContract, opts ...grpc.CallOption) (*MsgCreatePowerPurchaseContractResponse, error)
	UpdatePowerPurchaseContract(ctx context.Context, in *MsgUpdatePowerPurchaseContract, opts ...grpc.CallOption) (*MsgUpdatePowerPurchaseContractResponse, error)
	DeletePowerPurchaseContract(ctx context.Context, in *MsgDeletePowerPurchaseContract, opts ...grpc.CallOption) (*MsgDeletePowerPurchaseContractResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Record(ctx context.Context, in *MsgRecord, opts ...grpc.CallOption) (*MsgRecordResponse, error) {
	out := new(MsgRecordResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Msg/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Record3(ctx context.Context, in *MsgRecord3, opts ...grpc.CallOption) (*MsgRecord3Response, error) {
	out := new(MsgRecord3Response)
	err := c.cc.Invoke(ctx, "/electra.meter.Msg/Record3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePowerPurchaseContract(ctx context.Context, in *MsgCreatePowerPurchaseContract, opts ...grpc.CallOption) (*MsgCreatePowerPurchaseContractResponse, error) {
	out := new(MsgCreatePowerPurchaseContractResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Msg/CreatePowerPurchaseContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePowerPurchaseContract(ctx context.Context, in *MsgUpdatePowerPurchaseContract, opts ...grpc.CallOption) (*MsgUpdatePowerPurchaseContractResponse, error) {
	out := new(MsgUpdatePowerPurchaseContractResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Msg/UpdatePowerPurchaseContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePowerPurchaseContract(ctx context.Context, in *MsgDeletePowerPurchaseContract, opts ...grpc.CallOption) (*MsgDeletePowerPurchaseContractResponse, error) {
	out := new(MsgDeletePowerPurchaseContractResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Msg/DeletePowerPurchaseContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Record(context.Context, *MsgRecord) (*MsgRecordResponse, error)
	Record3(context.Context, *MsgRecord3) (*MsgRecord3Response, error)
	CreatePowerPurchaseContract(context.Context, *MsgCreatePowerPurchaseContract) (*MsgCreatePowerPurchaseContractResponse, error)
	UpdatePowerPurchaseContract(context.Context, *MsgUpdatePowerPurchaseContract) (*MsgUpdatePowerPurchaseContractResponse, error)
	DeletePowerPurchaseContract(context.Context, *MsgDeletePowerPurchaseContract) (*MsgDeletePowerPurchaseContractResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Record(ctx context.Context, req *MsgRecord) (*MsgRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (*UnimplementedMsgServer) Record3(ctx context.Context, req *MsgRecord3) (*MsgRecord3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record3 not implemented")
}
func (*UnimplementedMsgServer) CreatePowerPurchaseContract(ctx context.Context, req *MsgCreatePowerPurchaseContract) (*MsgCreatePowerPurchaseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePowerPurchaseContract not implemented")
}
func (*UnimplementedMsgServer) UpdatePowerPurchaseContract(ctx context.Context, req *MsgUpdatePowerPurchaseContract) (*MsgUpdatePowerPurchaseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePowerPurchaseContract not implemented")
}
func (*UnimplementedMsgServer) DeletePowerPurchaseContract(ctx context.Context, req *MsgDeletePowerPurchaseContract) (*MsgDeletePowerPurchaseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePowerPurchaseContract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Msg/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Record(ctx, req.(*MsgRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Record3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecord3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Record3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Msg/Record3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Record3(ctx, req.(*MsgRecord3))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePowerPurchaseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePowerPurchaseContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePowerPurchaseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Msg/CreatePowerPurchaseContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePowerPurchaseContract(ctx, req.(*MsgCreatePowerPurchaseContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePowerPurchaseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePowerPurchaseContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePowerPurchaseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Msg/UpdatePowerPurchaseContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePowerPurchaseContract(ctx, req.(*MsgUpdatePowerPurchaseContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePowerPurchaseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeletePowerPurchaseContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePowerPurchaseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Msg/DeletePowerPurchaseContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePowerPurchaseContract(ctx, req.(*MsgDeletePowerPurchaseContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "electra.meter.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _Msg_Record_Handler,
		},
		{
			MethodName: "Record3",
			Handler:    _Msg_Record3_Handler,
		},
		{
			MethodName: "CreatePowerPurchaseContract",
			Handler:    _Msg_CreatePowerPurchaseContract_Handler,
		},
		{
			MethodName: "UpdatePowerPurchaseContract",
			Handler:    _Msg_UpdatePowerPurchaseContract_Handler,
		},
		{
			MethodName: "DeletePowerPurchaseContract",
			Handler:    _Msg_DeletePowerPurchaseContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "electra/meter/tx.proto",
}

func (m *MsgRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maxmi != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Maxmi))
		i--
		dAtA[i] = 0x48
	}
	if m.Mpf != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mpf))
		i--
		dAtA[i] = 0x40
	}
	if m.Mhertz != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mhertz))
		i--
		dAtA[i] = 0x38
	}
	if m.Mvolt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mvolt))
		i--
		dAtA[i] = 0x30
	}
	if m.Whout != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whout))
		i--
		dAtA[i] = 0x28
	}
	if m.Whin != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whin))
		i--
		dAtA[i] = 0x20
	}
	if m.Phase != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRecord3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecord3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecord3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maxmi3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Maxmi3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Mpf3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mpf3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Mhertz3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mhertz3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Mvolt3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mvolt3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Whout3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whout3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Whin3 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whin3))
		i--
		dAtA[i] = 0x78
	}
	if m.Maxmi2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Maxmi2))
		i--
		dAtA[i] = 0x70
	}
	if m.Mpf2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mpf2))
		i--
		dAtA[i] = 0x68
	}
	if m.Mhertz2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mhertz2))
		i--
		dAtA[i] = 0x60
	}
	if m.Mvolt2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mvolt2))
		i--
		dAtA[i] = 0x58
	}
	if m.Whout2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whout2))
		i--
		dAtA[i] = 0x50
	}
	if m.Whin2 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whin2))
		i--
		dAtA[i] = 0x48
	}
	if m.Maxmi1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Maxmi1))
		i--
		dAtA[i] = 0x40
	}
	if m.Mpf1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mpf1))
		i--
		dAtA[i] = 0x38
	}
	if m.Mhertz1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mhertz1))
		i--
		dAtA[i] = 0x30
	}
	if m.Mvolt1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Mvolt1))
		i--
		dAtA[i] = 0x28
	}
	if m.Whout1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whout1))
		i--
		dAtA[i] = 0x20
	}
	if m.Whin1 != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Whin1))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecord3Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecord3Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecord3Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePowerPurchaseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePowerPurchaseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePowerPurchaseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Phase3RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase3RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Phase2RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase2RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Phase1RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase1RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ContractEndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractEndDate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ContractStartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractStartDate))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ContractPreferredCurency) > 0 {
		i -= len(m.ContractPreferredCurency)
		copy(dAtA[i:], m.ContractPreferredCurency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractPreferredCurency)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContractPreferredActivePeriod) > 0 {
		i -= len(m.ContractPreferredActivePeriod)
		copy(dAtA[i:], m.ContractPreferredActivePeriod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractPreferredActivePeriod)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ContractPreferredPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractPreferredPrice))
		i--
		dAtA[i] = 0x60
	}
	if m.ContractPreferred {
		i--
		if m.ContractPreferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ContractForAllActivePeriod) > 0 {
		i -= len(m.ContractForAllActivePeriod)
		copy(dAtA[i:], m.ContractForAllActivePeriod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractForAllActivePeriod)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ContractForAllCurency) > 0 {
		i -= len(m.ContractForAllCurency)
		copy(dAtA[i:], m.ContractForAllCurency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractForAllCurency)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ContractForAllPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractForAllPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.ContractForAll {
		i--
		if m.ContractForAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ContractPhase != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractPhase))
		i--
		dAtA[i] = 0x30
	}
	if m.ContractActive {
		i--
		if m.ContractActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractDeviceID) > 0 {
		i -= len(m.ContractDeviceID)
		copy(dAtA[i:], m.ContractDeviceID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractDeviceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractID) > 0 {
		i -= len(m.ContractID)
		copy(dAtA[i:], m.ContractID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePowerPurchaseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePowerPurchaseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePowerPurchaseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePowerPurchaseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePowerPurchaseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePowerPurchaseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Phase3RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase3RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Phase2RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase2RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Phase1RemainingWh != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Phase1RemainingWh))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ContractEndDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractEndDate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ContractStartDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractStartDate))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ContractPreferredCurency) > 0 {
		i -= len(m.ContractPreferredCurency)
		copy(dAtA[i:], m.ContractPreferredCurency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractPreferredCurency)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContractPreferredActivePeriod) > 0 {
		i -= len(m.ContractPreferredActivePeriod)
		copy(dAtA[i:], m.ContractPreferredActivePeriod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractPreferredActivePeriod)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ContractPreferredPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractPreferredPrice))
		i--
		dAtA[i] = 0x60
	}
	if m.ContractPreferred {
		i--
		if m.ContractPreferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ContractForAllActivePeriod) > 0 {
		i -= len(m.ContractForAllActivePeriod)
		copy(dAtA[i:], m.ContractForAllActivePeriod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractForAllActivePeriod)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ContractForAllCurency) > 0 {
		i -= len(m.ContractForAllCurency)
		copy(dAtA[i:], m.ContractForAllCurency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractForAllCurency)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ContractForAllPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractForAllPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.ContractForAll {
		i--
		if m.ContractForAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ContractPhase != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractPhase))
		i--
		dAtA[i] = 0x30
	}
	if m.ContractActive {
		i--
		if m.ContractActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractDeviceID) > 0 {
		i -= len(m.ContractDeviceID)
		copy(dAtA[i:], m.ContractDeviceID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractDeviceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractID) > 0 {
		i -= len(m.ContractID)
		copy(dAtA[i:], m.ContractID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePowerPurchaseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePowerPurchaseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePowerPurchaseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeletePowerPurchaseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePowerPurchaseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePowerPurchaseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractDeviceID) > 0 {
		i -= len(m.ContractDeviceID)
		copy(dAtA[i:], m.ContractDeviceID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractDeviceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractID) > 0 {
		i -= len(m.ContractID)
		copy(dAtA[i:], m.ContractID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeletePowerPurchaseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeletePowerPurchaseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeletePowerPurchaseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	if m.Phase != 0 {
		n += 1 + sovTx(uint64(m.Phase))
	}
	if m.Whin != 0 {
		n += 1 + sovTx(uint64(m.Whin))
	}
	if m.Whout != 0 {
		n += 1 + sovTx(uint64(m.Whout))
	}
	if m.Mvolt != 0 {
		n += 1 + sovTx(uint64(m.Mvolt))
	}
	if m.Mhertz != 0 {
		n += 1 + sovTx(uint64(m.Mhertz))
	}
	if m.Mpf != 0 {
		n += 1 + sovTx(uint64(m.Mpf))
	}
	if m.Maxmi != 0 {
		n += 1 + sovTx(uint64(m.Maxmi))
	}
	return n
}

func (m *MsgRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRecord3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTx(uint64(m.Timestamp))
	}
	if m.Whin1 != 0 {
		n += 1 + sovTx(uint64(m.Whin1))
	}
	if m.Whout1 != 0 {
		n += 1 + sovTx(uint64(m.Whout1))
	}
	if m.Mvolt1 != 0 {
		n += 1 + sovTx(uint64(m.Mvolt1))
	}
	if m.Mhertz1 != 0 {
		n += 1 + sovTx(uint64(m.Mhertz1))
	}
	if m.Mpf1 != 0 {
		n += 1 + sovTx(uint64(m.Mpf1))
	}
	if m.Maxmi1 != 0 {
		n += 1 + sovTx(uint64(m.Maxmi1))
	}
	if m.Whin2 != 0 {
		n += 1 + sovTx(uint64(m.Whin2))
	}
	if m.Whout2 != 0 {
		n += 1 + sovTx(uint64(m.Whout2))
	}
	if m.Mvolt2 != 0 {
		n += 1 + sovTx(uint64(m.Mvolt2))
	}
	if m.Mhertz2 != 0 {
		n += 1 + sovTx(uint64(m.Mhertz2))
	}
	if m.Mpf2 != 0 {
		n += 1 + sovTx(uint64(m.Mpf2))
	}
	if m.Maxmi2 != 0 {
		n += 1 + sovTx(uint64(m.Maxmi2))
	}
	if m.Whin3 != 0 {
		n += 1 + sovTx(uint64(m.Whin3))
	}
	if m.Whout3 != 0 {
		n += 2 + sovTx(uint64(m.Whout3))
	}
	if m.Mvolt3 != 0 {
		n += 2 + sovTx(uint64(m.Mvolt3))
	}
	if m.Mhertz3 != 0 {
		n += 2 + sovTx(uint64(m.Mhertz3))
	}
	if m.Mpf3 != 0 {
		n += 2 + sovTx(uint64(m.Mpf3))
	}
	if m.Maxmi3 != 0 {
		n += 2 + sovTx(uint64(m.Maxmi3))
	}
	return n
}

func (m *MsgRecord3Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePowerPurchaseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractDeviceID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractActive {
		n += 2
	}
	if m.ContractPhase != 0 {
		n += 1 + sovTx(uint64(m.ContractPhase))
	}
	if m.ContractForAll {
		n += 2
	}
	if m.ContractForAllPrice != 0 {
		n += 1 + sovTx(uint64(m.ContractForAllPrice))
	}
	l = len(m.ContractForAllCurency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractForAllActivePeriod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractPreferred {
		n += 2
	}
	if m.ContractPreferredPrice != 0 {
		n += 1 + sovTx(uint64(m.ContractPreferredPrice))
	}
	l = len(m.ContractPreferredActivePeriod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractPreferredCurency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractStartDate != 0 {
		n += 1 + sovTx(uint64(m.ContractStartDate))
	}
	if m.ContractEndDate != 0 {
		n += 2 + sovTx(uint64(m.ContractEndDate))
	}
	if m.Phase1RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase1RemainingWh))
	}
	if m.Phase2RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase2RemainingWh))
	}
	if m.Phase3RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase3RemainingWh))
	}
	return n
}

func (m *MsgCreatePowerPurchaseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePowerPurchaseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractDeviceID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractActive {
		n += 2
	}
	if m.ContractPhase != 0 {
		n += 1 + sovTx(uint64(m.ContractPhase))
	}
	if m.ContractForAll {
		n += 2
	}
	if m.ContractForAllPrice != 0 {
		n += 1 + sovTx(uint64(m.ContractForAllPrice))
	}
	l = len(m.ContractForAllCurency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractForAllActivePeriod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractPreferred {
		n += 2
	}
	if m.ContractPreferredPrice != 0 {
		n += 1 + sovTx(uint64(m.ContractPreferredPrice))
	}
	l = len(m.ContractPreferredActivePeriod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractPreferredCurency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractStartDate != 0 {
		n += 1 + sovTx(uint64(m.ContractStartDate))
	}
	if m.ContractEndDate != 0 {
		n += 2 + sovTx(uint64(m.ContractEndDate))
	}
	if m.Phase1RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase1RemainingWh))
	}
	if m.Phase2RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase2RemainingWh))
	}
	if m.Phase3RemainingWh != 0 {
		n += 2 + sovTx(uint64(m.Phase3RemainingWh))
	}
	return n
}

func (m *MsgUpdatePowerPurchaseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeletePowerPurchaseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractDeviceID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeletePowerPurchaseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whin", wireType)
			}
			m.Whin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whout", wireType)
			}
			m.Whout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvolt", wireType)
			}
			m.Mvolt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mvolt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mhertz", wireType)
			}
			m.Mhertz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mhertz |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpf", wireType)
			}
			m.Mpf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpf |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxmi", wireType)
			}
			m.Maxmi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxmi |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecord3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecord3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecord3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whin1", wireType)
			}
			m.Whin1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whin1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whout1", wireType)
			}
			m.Whout1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whout1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvolt1", wireType)
			}
			m.Mvolt1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mvolt1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mhertz1", wireType)
			}
			m.Mhertz1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mhertz1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpf1", wireType)
			}
			m.Mpf1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpf1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxmi1", wireType)
			}
			m.Maxmi1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxmi1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whin2", wireType)
			}
			m.Whin2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whin2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whout2", wireType)
			}
			m.Whout2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whout2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvolt2", wireType)
			}
			m.Mvolt2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mvolt2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mhertz2", wireType)
			}
			m.Mhertz2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mhertz2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpf2", wireType)
			}
			m.Mpf2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpf2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxmi2", wireType)
			}
			m.Maxmi2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxmi2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whin3", wireType)
			}
			m.Whin3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whin3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whout3", wireType)
			}
			m.Whout3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whout3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvolt3", wireType)
			}
			m.Mvolt3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mvolt3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mhertz3", wireType)
			}
			m.Mhertz3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mhertz3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpf3", wireType)
			}
			m.Mpf3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpf3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxmi3", wireType)
			}
			m.Maxmi3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxmi3 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecord3Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecord3Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecord3Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePowerPurchaseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePowerPurchaseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePowerPurchaseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPhase", wireType)
			}
			m.ContractPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractPhase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractForAll = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllPrice", wireType)
			}
			m.ContractForAllPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractForAllPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllCurency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractForAllCurency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllActivePeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractForAllActivePeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractPreferred = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredPrice", wireType)
			}
			m.ContractPreferredPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractPreferredPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredActivePeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractPreferredActivePeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredCurency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractPreferredCurency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractStartDate", wireType)
			}
			m.ContractStartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractStartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractEndDate", wireType)
			}
			m.ContractEndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractEndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase1RemainingWh", wireType)
			}
			m.Phase1RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase1RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase2RemainingWh", wireType)
			}
			m.Phase2RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase2RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase3RemainingWh", wireType)
			}
			m.Phase3RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase3RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePowerPurchaseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePowerPurchaseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePowerPurchaseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePowerPurchaseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePowerPurchaseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePowerPurchaseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPhase", wireType)
			}
			m.ContractPhase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractPhase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractForAll = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllPrice", wireType)
			}
			m.ContractForAllPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractForAllPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllCurency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractForAllCurency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractForAllActivePeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractForAllActivePeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractPreferred = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredPrice", wireType)
			}
			m.ContractPreferredPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractPreferredPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredActivePeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractPreferredActivePeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPreferredCurency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractPreferredCurency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractStartDate", wireType)
			}
			m.ContractStartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractStartDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractEndDate", wireType)
			}
			m.ContractEndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractEndDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase1RemainingWh", wireType)
			}
			m.Phase1RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase1RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase2RemainingWh", wireType)
			}
			m.Phase2RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase2RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase3RemainingWh", wireType)
			}
			m.Phase3RemainingWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase3RemainingWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePowerPurchaseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePowerPurchaseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePowerPurchaseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePowerPurchaseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePowerPurchaseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePowerPurchaseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeletePowerPurchaseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeletePowerPurchaseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeletePowerPurchaseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
