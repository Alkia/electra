// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: electra/meter/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMeterreadingsRequest struct {
	DeviceID  string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetMeterreadingsRequest) Reset()         { *m = QueryGetMeterreadingsRequest{} }
func (m *QueryGetMeterreadingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeterreadingsRequest) ProtoMessage()    {}
func (*QueryGetMeterreadingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{2}
}
func (m *QueryGetMeterreadingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeterreadingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeterreadingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeterreadingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeterreadingsRequest.Merge(m, src)
}
func (m *QueryGetMeterreadingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeterreadingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeterreadingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeterreadingsRequest proto.InternalMessageInfo

func (m *QueryGetMeterreadingsRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *QueryGetMeterreadingsRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetMeterreadingsResponse struct {
	Meterreadings Meterreadings `protobuf:"bytes,1,opt,name=meterreadings,proto3" json:"meterreadings"`
}

func (m *QueryGetMeterreadingsResponse) Reset()         { *m = QueryGetMeterreadingsResponse{} }
func (m *QueryGetMeterreadingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeterreadingsResponse) ProtoMessage()    {}
func (*QueryGetMeterreadingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{3}
}
func (m *QueryGetMeterreadingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeterreadingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeterreadingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeterreadingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeterreadingsResponse.Merge(m, src)
}
func (m *QueryGetMeterreadingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeterreadingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeterreadingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeterreadingsResponse proto.InternalMessageInfo

func (m *QueryGetMeterreadingsResponse) GetMeterreadings() Meterreadings {
	if m != nil {
		return m.Meterreadings
	}
	return Meterreadings{}
}

type QueryAllMeterreadingsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeterreadingsRequest) Reset()         { *m = QueryAllMeterreadingsRequest{} }
func (m *QueryAllMeterreadingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeterreadingsRequest) ProtoMessage()    {}
func (*QueryAllMeterreadingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{4}
}
func (m *QueryAllMeterreadingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeterreadingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeterreadingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeterreadingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeterreadingsRequest.Merge(m, src)
}
func (m *QueryAllMeterreadingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeterreadingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeterreadingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeterreadingsRequest proto.InternalMessageInfo

func (m *QueryAllMeterreadingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMeterreadingsResponse struct {
	Meterreadings []Meterreadings     `protobuf:"bytes,1,rep,name=meterreadings,proto3" json:"meterreadings"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeterreadingsResponse) Reset()         { *m = QueryAllMeterreadingsResponse{} }
func (m *QueryAllMeterreadingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeterreadingsResponse) ProtoMessage()    {}
func (*QueryAllMeterreadingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{5}
}
func (m *QueryAllMeterreadingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeterreadingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeterreadingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeterreadingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeterreadingsResponse.Merge(m, src)
}
func (m *QueryAllMeterreadingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeterreadingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeterreadingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeterreadingsResponse proto.InternalMessageInfo

func (m *QueryAllMeterreadingsResponse) GetMeterreadings() []Meterreadings {
	if m != nil {
		return m.Meterreadings
	}
	return nil
}

func (m *QueryAllMeterreadingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMeterdirectoryRequest struct {
	DeviceID      string `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Barcodeserial string `protobuf:"bytes,2,opt,name=barcodeserial,proto3" json:"barcodeserial,omitempty"`
}

func (m *QueryGetMeterdirectoryRequest) Reset()         { *m = QueryGetMeterdirectoryRequest{} }
func (m *QueryGetMeterdirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeterdirectoryRequest) ProtoMessage()    {}
func (*QueryGetMeterdirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{6}
}
func (m *QueryGetMeterdirectoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeterdirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeterdirectoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeterdirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeterdirectoryRequest.Merge(m, src)
}
func (m *QueryGetMeterdirectoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeterdirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeterdirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeterdirectoryRequest proto.InternalMessageInfo

func (m *QueryGetMeterdirectoryRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *QueryGetMeterdirectoryRequest) GetBarcodeserial() string {
	if m != nil {
		return m.Barcodeserial
	}
	return ""
}

type QueryGetMeterdirectoryResponse struct {
	Meterdirectory Meterdirectory `protobuf:"bytes,1,opt,name=meterdirectory,proto3" json:"meterdirectory"`
}

func (m *QueryGetMeterdirectoryResponse) Reset()         { *m = QueryGetMeterdirectoryResponse{} }
func (m *QueryGetMeterdirectoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeterdirectoryResponse) ProtoMessage()    {}
func (*QueryGetMeterdirectoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{7}
}
func (m *QueryGetMeterdirectoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeterdirectoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeterdirectoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeterdirectoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeterdirectoryResponse.Merge(m, src)
}
func (m *QueryGetMeterdirectoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeterdirectoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeterdirectoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeterdirectoryResponse proto.InternalMessageInfo

func (m *QueryGetMeterdirectoryResponse) GetMeterdirectory() Meterdirectory {
	if m != nil {
		return m.Meterdirectory
	}
	return Meterdirectory{}
}

type QueryAllMeterdirectoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeterdirectoryRequest) Reset()         { *m = QueryAllMeterdirectoryRequest{} }
func (m *QueryAllMeterdirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeterdirectoryRequest) ProtoMessage()    {}
func (*QueryAllMeterdirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{8}
}
func (m *QueryAllMeterdirectoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeterdirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeterdirectoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeterdirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeterdirectoryRequest.Merge(m, src)
}
func (m *QueryAllMeterdirectoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeterdirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeterdirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeterdirectoryRequest proto.InternalMessageInfo

func (m *QueryAllMeterdirectoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMeterdirectoryResponse struct {
	Meterdirectory []Meterdirectory    `protobuf:"bytes,1,rep,name=meterdirectory,proto3" json:"meterdirectory"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeterdirectoryResponse) Reset()         { *m = QueryAllMeterdirectoryResponse{} }
func (m *QueryAllMeterdirectoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeterdirectoryResponse) ProtoMessage()    {}
func (*QueryAllMeterdirectoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{9}
}
func (m *QueryAllMeterdirectoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeterdirectoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeterdirectoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeterdirectoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeterdirectoryResponse.Merge(m, src)
}
func (m *QueryAllMeterdirectoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeterdirectoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeterdirectoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeterdirectoryResponse proto.InternalMessageInfo

func (m *QueryAllMeterdirectoryResponse) GetMeterdirectory() []Meterdirectory {
	if m != nil {
		return m.Meterdirectory
	}
	return nil
}

func (m *QueryAllMeterdirectoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListrecordingsRequest struct {
	DeviceID   string             `protobuf:"bytes,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	Start      uint64             `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End        uint64             `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	ByUnixTime bool               `protobuf:"varint,4,opt,name=byUnixTime,proto3" json:"byUnixTime,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListrecordingsRequest) Reset()         { *m = QueryListrecordingsRequest{} }
func (m *QueryListrecordingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListrecordingsRequest) ProtoMessage()    {}
func (*QueryListrecordingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{10}
}
func (m *QueryListrecordingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListrecordingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListrecordingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListrecordingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListrecordingsRequest.Merge(m, src)
}
func (m *QueryListrecordingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListrecordingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListrecordingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListrecordingsRequest proto.InternalMessageInfo

func (m *QueryListrecordingsRequest) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *QueryListrecordingsRequest) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *QueryListrecordingsRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *QueryListrecordingsRequest) GetByUnixTime() bool {
	if m != nil {
		return m.ByUnixTime
	}
	return false
}

func (m *QueryListrecordingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListrecordingsResponse struct {
	Meterreadings []string            `protobuf:"bytes,1,rep,name=meterreadings,proto3" json:"meterreadings,omitempty"`
	Comments      string              `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	Total         uint64              `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListrecordingsResponse) Reset()         { *m = QueryListrecordingsResponse{} }
func (m *QueryListrecordingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListrecordingsResponse) ProtoMessage()    {}
func (*QueryListrecordingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{11}
}
func (m *QueryListrecordingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListrecordingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListrecordingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListrecordingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListrecordingsResponse.Merge(m, src)
}
func (m *QueryListrecordingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListrecordingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListrecordingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListrecordingsResponse proto.InternalMessageInfo

func (m *QueryListrecordingsResponse) GetMeterreadings() []string {
	if m != nil {
		return m.Meterreadings
	}
	return nil
}

func (m *QueryListrecordingsResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *QueryListrecordingsResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QueryListrecordingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPowerPurchaseContractRequest struct {
	ContractID       string `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	ContractDeviceID string `protobuf:"bytes,2,opt,name=contractDeviceID,proto3" json:"contractDeviceID,omitempty"`
}

func (m *QueryGetPowerPurchaseContractRequest) Reset()         { *m = QueryGetPowerPurchaseContractRequest{} }
func (m *QueryGetPowerPurchaseContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPowerPurchaseContractRequest) ProtoMessage()    {}
func (*QueryGetPowerPurchaseContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{12}
}
func (m *QueryGetPowerPurchaseContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPowerPurchaseContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPowerPurchaseContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPowerPurchaseContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPowerPurchaseContractRequest.Merge(m, src)
}
func (m *QueryGetPowerPurchaseContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPowerPurchaseContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPowerPurchaseContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPowerPurchaseContractRequest proto.InternalMessageInfo

func (m *QueryGetPowerPurchaseContractRequest) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *QueryGetPowerPurchaseContractRequest) GetContractDeviceID() string {
	if m != nil {
		return m.ContractDeviceID
	}
	return ""
}

type QueryGetPowerPurchaseContractResponse struct {
	PowerPurchaseContract PowerPurchaseContract `protobuf:"bytes,1,opt,name=powerPurchaseContract,proto3" json:"powerPurchaseContract"`
}

func (m *QueryGetPowerPurchaseContractResponse) Reset()         { *m = QueryGetPowerPurchaseContractResponse{} }
func (m *QueryGetPowerPurchaseContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPowerPurchaseContractResponse) ProtoMessage()    {}
func (*QueryGetPowerPurchaseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{13}
}
func (m *QueryGetPowerPurchaseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPowerPurchaseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPowerPurchaseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPowerPurchaseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPowerPurchaseContractResponse.Merge(m, src)
}
func (m *QueryGetPowerPurchaseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPowerPurchaseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPowerPurchaseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPowerPurchaseContractResponse proto.InternalMessageInfo

func (m *QueryGetPowerPurchaseContractResponse) GetPowerPurchaseContract() PowerPurchaseContract {
	if m != nil {
		return m.PowerPurchaseContract
	}
	return PowerPurchaseContract{}
}

type QueryAllPowerPurchaseContractRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPowerPurchaseContractRequest) Reset()         { *m = QueryAllPowerPurchaseContractRequest{} }
func (m *QueryAllPowerPurchaseContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPowerPurchaseContractRequest) ProtoMessage()    {}
func (*QueryAllPowerPurchaseContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{14}
}
func (m *QueryAllPowerPurchaseContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPowerPurchaseContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPowerPurchaseContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPowerPurchaseContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPowerPurchaseContractRequest.Merge(m, src)
}
func (m *QueryAllPowerPurchaseContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPowerPurchaseContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPowerPurchaseContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPowerPurchaseContractRequest proto.InternalMessageInfo

func (m *QueryAllPowerPurchaseContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPowerPurchaseContractResponse struct {
	PowerPurchaseContract []PowerPurchaseContract `protobuf:"bytes,1,rep,name=powerPurchaseContract,proto3" json:"powerPurchaseContract"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPowerPurchaseContractResponse) Reset()         { *m = QueryAllPowerPurchaseContractResponse{} }
func (m *QueryAllPowerPurchaseContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPowerPurchaseContractResponse) ProtoMessage()    {}
func (*QueryAllPowerPurchaseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{15}
}
func (m *QueryAllPowerPurchaseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPowerPurchaseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPowerPurchaseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPowerPurchaseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPowerPurchaseContractResponse.Merge(m, src)
}
func (m *QueryAllPowerPurchaseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPowerPurchaseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPowerPurchaseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPowerPurchaseContractResponse proto.InternalMessageInfo

func (m *QueryAllPowerPurchaseContractResponse) GetPowerPurchaseContract() []PowerPurchaseContract {
	if m != nil {
		return m.PowerPurchaseContract
	}
	return nil
}

func (m *QueryAllPowerPurchaseContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPpaMapRequest struct {
	ConsumerDeviceID string `protobuf:"bytes,1,opt,name=consumerDeviceID,proto3" json:"consumerDeviceID,omitempty"`
	AgreementID      string `protobuf:"bytes,2,opt,name=agreementID,proto3" json:"agreementID,omitempty"`
	AgreementActive  bool   `protobuf:"varint,3,opt,name=agreementActive,proto3" json:"agreementActive,omitempty"`
	ContractID       string `protobuf:"bytes,4,opt,name=contractID,proto3" json:"contractID,omitempty"`
}

func (m *QueryGetPpaMapRequest) Reset()         { *m = QueryGetPpaMapRequest{} }
func (m *QueryGetPpaMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPpaMapRequest) ProtoMessage()    {}
func (*QueryGetPpaMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{16}
}
func (m *QueryGetPpaMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPpaMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPpaMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPpaMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPpaMapRequest.Merge(m, src)
}
func (m *QueryGetPpaMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPpaMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPpaMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPpaMapRequest proto.InternalMessageInfo

func (m *QueryGetPpaMapRequest) GetConsumerDeviceID() string {
	if m != nil {
		return m.ConsumerDeviceID
	}
	return ""
}

func (m *QueryGetPpaMapRequest) GetAgreementID() string {
	if m != nil {
		return m.AgreementID
	}
	return ""
}

func (m *QueryGetPpaMapRequest) GetAgreementActive() bool {
	if m != nil {
		return m.AgreementActive
	}
	return false
}

func (m *QueryGetPpaMapRequest) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

type QueryGetPpaMapResponse struct {
	PpaMap PpaMap `protobuf:"bytes,1,opt,name=ppaMap,proto3" json:"ppaMap"`
}

func (m *QueryGetPpaMapResponse) Reset()         { *m = QueryGetPpaMapResponse{} }
func (m *QueryGetPpaMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPpaMapResponse) ProtoMessage()    {}
func (*QueryGetPpaMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{17}
}
func (m *QueryGetPpaMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPpaMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPpaMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPpaMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPpaMapResponse.Merge(m, src)
}
func (m *QueryGetPpaMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPpaMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPpaMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPpaMapResponse proto.InternalMessageInfo

func (m *QueryGetPpaMapResponse) GetPpaMap() PpaMap {
	if m != nil {
		return m.PpaMap
	}
	return PpaMap{}
}

type QueryAllPpaMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPpaMapRequest) Reset()         { *m = QueryAllPpaMapRequest{} }
func (m *QueryAllPpaMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPpaMapRequest) ProtoMessage()    {}
func (*QueryAllPpaMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{18}
}
func (m *QueryAllPpaMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPpaMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPpaMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPpaMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPpaMapRequest.Merge(m, src)
}
func (m *QueryAllPpaMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPpaMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPpaMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPpaMapRequest proto.InternalMessageInfo

func (m *QueryAllPpaMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPpaMapResponse struct {
	PpaMap     []PpaMap            `protobuf:"bytes,1,rep,name=ppaMap,proto3" json:"ppaMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPpaMapResponse) Reset()         { *m = QueryAllPpaMapResponse{} }
func (m *QueryAllPpaMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPpaMapResponse) ProtoMessage()    {}
func (*QueryAllPpaMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{19}
}
func (m *QueryAllPpaMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPpaMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPpaMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPpaMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPpaMapResponse.Merge(m, src)
}
func (m *QueryAllPpaMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPpaMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPpaMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPpaMapResponse proto.InternalMessageInfo

func (m *QueryAllPpaMapResponse) GetPpaMap() []PpaMap {
	if m != nil {
		return m.PpaMap
	}
	return nil
}

func (m *QueryAllPpaMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBillingcyclesRequest struct {
	CycleID uint64 `protobuf:"varint,1,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
}

func (m *QueryGetBillingcyclesRequest) Reset()         { *m = QueryGetBillingcyclesRequest{} }
func (m *QueryGetBillingcyclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBillingcyclesRequest) ProtoMessage()    {}
func (*QueryGetBillingcyclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{20}
}
func (m *QueryGetBillingcyclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBillingcyclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBillingcyclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBillingcyclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBillingcyclesRequest.Merge(m, src)
}
func (m *QueryGetBillingcyclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBillingcyclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBillingcyclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBillingcyclesRequest proto.InternalMessageInfo

func (m *QueryGetBillingcyclesRequest) GetCycleID() uint64 {
	if m != nil {
		return m.CycleID
	}
	return 0
}

type QueryGetBillingcyclesResponse struct {
	Billingcycles Billingcycles `protobuf:"bytes,1,opt,name=billingcycles,proto3" json:"billingcycles"`
}

func (m *QueryGetBillingcyclesResponse) Reset()         { *m = QueryGetBillingcyclesResponse{} }
func (m *QueryGetBillingcyclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBillingcyclesResponse) ProtoMessage()    {}
func (*QueryGetBillingcyclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{21}
}
func (m *QueryGetBillingcyclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBillingcyclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBillingcyclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBillingcyclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBillingcyclesResponse.Merge(m, src)
}
func (m *QueryGetBillingcyclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBillingcyclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBillingcyclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBillingcyclesResponse proto.InternalMessageInfo

func (m *QueryGetBillingcyclesResponse) GetBillingcycles() Billingcycles {
	if m != nil {
		return m.Billingcycles
	}
	return Billingcycles{}
}

type QueryAllBillingcyclesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBillingcyclesRequest) Reset()         { *m = QueryAllBillingcyclesRequest{} }
func (m *QueryAllBillingcyclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBillingcyclesRequest) ProtoMessage()    {}
func (*QueryAllBillingcyclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{22}
}
func (m *QueryAllBillingcyclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBillingcyclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBillingcyclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBillingcyclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBillingcyclesRequest.Merge(m, src)
}
func (m *QueryAllBillingcyclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBillingcyclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBillingcyclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBillingcyclesRequest proto.InternalMessageInfo

func (m *QueryAllBillingcyclesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBillingcyclesResponse struct {
	Billingcycles []Billingcycles     `protobuf:"bytes,1,rep,name=billingcycles,proto3" json:"billingcycles"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBillingcyclesResponse) Reset()         { *m = QueryAllBillingcyclesResponse{} }
func (m *QueryAllBillingcyclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBillingcyclesResponse) ProtoMessage()    {}
func (*QueryAllBillingcyclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{23}
}
func (m *QueryAllBillingcyclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBillingcyclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBillingcyclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBillingcyclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBillingcyclesResponse.Merge(m, src)
}
func (m *QueryAllBillingcyclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBillingcyclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBillingcyclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBillingcyclesResponse proto.InternalMessageInfo

func (m *QueryAllBillingcyclesResponse) GetBillingcycles() []Billingcycles {
	if m != nil {
		return m.Billingcycles
	}
	return nil
}

func (m *QueryAllBillingcyclesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCurrentcycleIDRequest struct {
}

func (m *QueryCurrentcycleIDRequest) Reset()         { *m = QueryCurrentcycleIDRequest{} }
func (m *QueryCurrentcycleIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentcycleIDRequest) ProtoMessage()    {}
func (*QueryCurrentcycleIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{24}
}
func (m *QueryCurrentcycleIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentcycleIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentcycleIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentcycleIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentcycleIDRequest.Merge(m, src)
}
func (m *QueryCurrentcycleIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentcycleIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentcycleIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentcycleIDRequest proto.InternalMessageInfo

type QueryCurrentcycleIDResponse struct {
	CycleID  uint64 `protobuf:"varint,1,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Begin    uint64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End      uint64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Whin     uint64 `protobuf:"varint,4,opt,name=whin,proto3" json:"whin,omitempty"`
	Whout    uint64 `protobuf:"varint,5,opt,name=whout,proto3" json:"whout,omitempty"`
	Moneyin  uint64 `protobuf:"varint,6,opt,name=moneyin,proto3" json:"moneyin,omitempty"`
	Moneyout uint64 `protobuf:"varint,7,opt,name=moneyout,proto3" json:"moneyout,omitempty"`
	Curency  string `protobuf:"bytes,8,opt,name=curency,proto3" json:"curency,omitempty"`
}

func (m *QueryCurrentcycleIDResponse) Reset()         { *m = QueryCurrentcycleIDResponse{} }
func (m *QueryCurrentcycleIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentcycleIDResponse) ProtoMessage()    {}
func (*QueryCurrentcycleIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{25}
}
func (m *QueryCurrentcycleIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentcycleIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentcycleIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentcycleIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentcycleIDResponse.Merge(m, src)
}
func (m *QueryCurrentcycleIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentcycleIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentcycleIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentcycleIDResponse proto.InternalMessageInfo

func (m *QueryCurrentcycleIDResponse) GetCycleID() uint64 {
	if m != nil {
		return m.CycleID
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetWhin() uint64 {
	if m != nil {
		return m.Whin
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetWhout() uint64 {
	if m != nil {
		return m.Whout
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetMoneyin() uint64 {
	if m != nil {
		return m.Moneyin
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetMoneyout() uint64 {
	if m != nil {
		return m.Moneyout
	}
	return 0
}

func (m *QueryCurrentcycleIDResponse) GetCurency() string {
	if m != nil {
		return m.Curency
	}
	return ""
}

type QueryGetCustomerbillinglineRequest struct {
	CustomerDeviceID string `protobuf:"bytes,1,opt,name=customerDeviceID,proto3" json:"customerDeviceID,omitempty"`
	CycleID          uint64 `protobuf:"varint,2,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Lineid           uint64 `protobuf:"varint,3,opt,name=lineid,proto3" json:"lineid,omitempty"`
	Paid             bool   `protobuf:"varint,4,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (m *QueryGetCustomerbillinglineRequest) Reset()         { *m = QueryGetCustomerbillinglineRequest{} }
func (m *QueryGetCustomerbillinglineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCustomerbillinglineRequest) ProtoMessage()    {}
func (*QueryGetCustomerbillinglineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{26}
}
func (m *QueryGetCustomerbillinglineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCustomerbillinglineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCustomerbillinglineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCustomerbillinglineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCustomerbillinglineRequest.Merge(m, src)
}
func (m *QueryGetCustomerbillinglineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCustomerbillinglineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCustomerbillinglineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCustomerbillinglineRequest proto.InternalMessageInfo

func (m *QueryGetCustomerbillinglineRequest) GetCustomerDeviceID() string {
	if m != nil {
		return m.CustomerDeviceID
	}
	return ""
}

func (m *QueryGetCustomerbillinglineRequest) GetCycleID() uint64 {
	if m != nil {
		return m.CycleID
	}
	return 0
}

func (m *QueryGetCustomerbillinglineRequest) GetLineid() uint64 {
	if m != nil {
		return m.Lineid
	}
	return 0
}

func (m *QueryGetCustomerbillinglineRequest) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

type QueryGetCustomerbillinglineResponse struct {
	Customerbillingline Customerbillingline `protobuf:"bytes,1,opt,name=customerbillingline,proto3" json:"customerbillingline"`
}

func (m *QueryGetCustomerbillinglineResponse) Reset()         { *m = QueryGetCustomerbillinglineResponse{} }
func (m *QueryGetCustomerbillinglineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCustomerbillinglineResponse) ProtoMessage()    {}
func (*QueryGetCustomerbillinglineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{27}
}
func (m *QueryGetCustomerbillinglineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCustomerbillinglineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCustomerbillinglineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCustomerbillinglineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCustomerbillinglineResponse.Merge(m, src)
}
func (m *QueryGetCustomerbillinglineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCustomerbillinglineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCustomerbillinglineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCustomerbillinglineResponse proto.InternalMessageInfo

func (m *QueryGetCustomerbillinglineResponse) GetCustomerbillingline() Customerbillingline {
	if m != nil {
		return m.Customerbillingline
	}
	return Customerbillingline{}
}

type QueryAllCustomerbillinglineRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCustomerbillinglineRequest) Reset()         { *m = QueryAllCustomerbillinglineRequest{} }
func (m *QueryAllCustomerbillinglineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCustomerbillinglineRequest) ProtoMessage()    {}
func (*QueryAllCustomerbillinglineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{28}
}
func (m *QueryAllCustomerbillinglineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCustomerbillinglineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCustomerbillinglineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCustomerbillinglineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCustomerbillinglineRequest.Merge(m, src)
}
func (m *QueryAllCustomerbillinglineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCustomerbillinglineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCustomerbillinglineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCustomerbillinglineRequest proto.InternalMessageInfo

func (m *QueryAllCustomerbillinglineRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCustomerbillinglineResponse struct {
	Customerbillingline []Customerbillingline `protobuf:"bytes,1,rep,name=customerbillingline,proto3" json:"customerbillingline"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCustomerbillinglineResponse) Reset()         { *m = QueryAllCustomerbillinglineResponse{} }
func (m *QueryAllCustomerbillinglineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCustomerbillinglineResponse) ProtoMessage()    {}
func (*QueryAllCustomerbillinglineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{29}
}
func (m *QueryAllCustomerbillinglineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCustomerbillinglineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCustomerbillinglineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCustomerbillinglineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCustomerbillinglineResponse.Merge(m, src)
}
func (m *QueryAllCustomerbillinglineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCustomerbillinglineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCustomerbillinglineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCustomerbillinglineResponse proto.InternalMessageInfo

func (m *QueryAllCustomerbillinglineResponse) GetCustomerbillingline() []Customerbillingline {
	if m != nil {
		return m.Customerbillingline
	}
	return nil
}

func (m *QueryAllCustomerbillinglineResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetcustomerbillRequest struct {
	CustomerDeviceID string             `protobuf:"bytes,1,opt,name=customerDeviceID,proto3" json:"customerDeviceID,omitempty"`
	BillCycleID      uint64             `protobuf:"varint,2,opt,name=billCycleID,proto3" json:"billCycleID,omitempty"`
	Pagination       *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetcustomerbillRequest) Reset()         { *m = QueryGetcustomerbillRequest{} }
func (m *QueryGetcustomerbillRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetcustomerbillRequest) ProtoMessage()    {}
func (*QueryGetcustomerbillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{30}
}
func (m *QueryGetcustomerbillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetcustomerbillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetcustomerbillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetcustomerbillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetcustomerbillRequest.Merge(m, src)
}
func (m *QueryGetcustomerbillRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetcustomerbillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetcustomerbillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetcustomerbillRequest proto.InternalMessageInfo

func (m *QueryGetcustomerbillRequest) GetCustomerDeviceID() string {
	if m != nil {
		return m.CustomerDeviceID
	}
	return ""
}

func (m *QueryGetcustomerbillRequest) GetBillCycleID() uint64 {
	if m != nil {
		return m.BillCycleID
	}
	return 0
}

func (m *QueryGetcustomerbillRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetcustomerbillResponse struct {
	Customerbillinglines []string            `protobuf:"bytes,1,rep,name=customerbillinglines,proto3" json:"customerbillinglines,omitempty"`
	BillTotalWh          uint64              `protobuf:"varint,2,opt,name=billTotalWh,proto3" json:"billTotalWh,omitempty"`
	BillTotalPrice       uint64              `protobuf:"varint,3,opt,name=billTotalPrice,proto3" json:"billTotalPrice,omitempty"`
	Currency             string              `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Nblines              uint64              `protobuf:"varint,5,opt,name=nblines,proto3" json:"nblines,omitempty"`
	Comments             string              `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
	Pagination           *query.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetcustomerbillResponse) Reset()         { *m = QueryGetcustomerbillResponse{} }
func (m *QueryGetcustomerbillResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetcustomerbillResponse) ProtoMessage()    {}
func (*QueryGetcustomerbillResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{31}
}
func (m *QueryGetcustomerbillResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetcustomerbillResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetcustomerbillResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetcustomerbillResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetcustomerbillResponse.Merge(m, src)
}
func (m *QueryGetcustomerbillResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetcustomerbillResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetcustomerbillResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetcustomerbillResponse proto.InternalMessageInfo

func (m *QueryGetcustomerbillResponse) GetCustomerbillinglines() []string {
	if m != nil {
		return m.Customerbillinglines
	}
	return nil
}

func (m *QueryGetcustomerbillResponse) GetBillTotalWh() uint64 {
	if m != nil {
		return m.BillTotalWh
	}
	return 0
}

func (m *QueryGetcustomerbillResponse) GetBillTotalPrice() uint64 {
	if m != nil {
		return m.BillTotalPrice
	}
	return 0
}

func (m *QueryGetcustomerbillResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *QueryGetcustomerbillResponse) GetNblines() uint64 {
	if m != nil {
		return m.Nblines
	}
	return 0
}

func (m *QueryGetcustomerbillResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *QueryGetcustomerbillResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCustomerbillsRequest struct {
	BillCycleID      uint64 `protobuf:"varint,1,opt,name=billCycleID,proto3" json:"billCycleID,omitempty"`
	CustomerDeviceID string `protobuf:"bytes,2,opt,name=customerDeviceID,proto3" json:"customerDeviceID,omitempty"`
}

func (m *QueryGetCustomerbillsRequest) Reset()         { *m = QueryGetCustomerbillsRequest{} }
func (m *QueryGetCustomerbillsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCustomerbillsRequest) ProtoMessage()    {}
func (*QueryGetCustomerbillsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{32}
}
func (m *QueryGetCustomerbillsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCustomerbillsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCustomerbillsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCustomerbillsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCustomerbillsRequest.Merge(m, src)
}
func (m *QueryGetCustomerbillsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCustomerbillsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCustomerbillsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCustomerbillsRequest proto.InternalMessageInfo

func (m *QueryGetCustomerbillsRequest) GetBillCycleID() uint64 {
	if m != nil {
		return m.BillCycleID
	}
	return 0
}

func (m *QueryGetCustomerbillsRequest) GetCustomerDeviceID() string {
	if m != nil {
		return m.CustomerDeviceID
	}
	return ""
}

type QueryGetCustomerbillsResponse struct {
	Customerbills Customerbills `protobuf:"bytes,1,opt,name=customerbills,proto3" json:"customerbills"`
}

func (m *QueryGetCustomerbillsResponse) Reset()         { *m = QueryGetCustomerbillsResponse{} }
func (m *QueryGetCustomerbillsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCustomerbillsResponse) ProtoMessage()    {}
func (*QueryGetCustomerbillsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{33}
}
func (m *QueryGetCustomerbillsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCustomerbillsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCustomerbillsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCustomerbillsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCustomerbillsResponse.Merge(m, src)
}
func (m *QueryGetCustomerbillsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCustomerbillsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCustomerbillsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCustomerbillsResponse proto.InternalMessageInfo

func (m *QueryGetCustomerbillsResponse) GetCustomerbills() Customerbills {
	if m != nil {
		return m.Customerbills
	}
	return Customerbills{}
}

type QueryAllCustomerbillsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCustomerbillsRequest) Reset()         { *m = QueryAllCustomerbillsRequest{} }
func (m *QueryAllCustomerbillsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCustomerbillsRequest) ProtoMessage()    {}
func (*QueryAllCustomerbillsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{34}
}
func (m *QueryAllCustomerbillsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCustomerbillsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCustomerbillsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCustomerbillsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCustomerbillsRequest.Merge(m, src)
}
func (m *QueryAllCustomerbillsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCustomerbillsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCustomerbillsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCustomerbillsRequest proto.InternalMessageInfo

func (m *QueryAllCustomerbillsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCustomerbillsResponse struct {
	Customerbills []Customerbills     `protobuf:"bytes,1,rep,name=customerbills,proto3" json:"customerbills"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCustomerbillsResponse) Reset()         { *m = QueryAllCustomerbillsResponse{} }
func (m *QueryAllCustomerbillsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCustomerbillsResponse) ProtoMessage()    {}
func (*QueryAllCustomerbillsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{35}
}
func (m *QueryAllCustomerbillsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCustomerbillsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCustomerbillsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCustomerbillsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCustomerbillsResponse.Merge(m, src)
}
func (m *QueryAllCustomerbillsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCustomerbillsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCustomerbillsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCustomerbillsResponse proto.InternalMessageInfo

func (m *QueryAllCustomerbillsResponse) GetCustomerbills() []Customerbills {
	if m != nil {
		return m.Customerbills
	}
	return nil
}

func (m *QueryAllCustomerbillsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProducerbillinglineRequest struct {
	ProducerDeviceID string `protobuf:"bytes,1,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
	CycleID          uint64 `protobuf:"varint,2,opt,name=cycleID,proto3" json:"cycleID,omitempty"`
	Lineid           uint64 `protobuf:"varint,3,opt,name=lineid,proto3" json:"lineid,omitempty"`
	Paid             bool   `protobuf:"varint,4,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (m *QueryGetProducerbillinglineRequest) Reset()         { *m = QueryGetProducerbillinglineRequest{} }
func (m *QueryGetProducerbillinglineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerbillinglineRequest) ProtoMessage()    {}
func (*QueryGetProducerbillinglineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{36}
}
func (m *QueryGetProducerbillinglineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerbillinglineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerbillinglineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerbillinglineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerbillinglineRequest.Merge(m, src)
}
func (m *QueryGetProducerbillinglineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerbillinglineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerbillinglineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerbillinglineRequest proto.InternalMessageInfo

func (m *QueryGetProducerbillinglineRequest) GetProducerDeviceID() string {
	if m != nil {
		return m.ProducerDeviceID
	}
	return ""
}

func (m *QueryGetProducerbillinglineRequest) GetCycleID() uint64 {
	if m != nil {
		return m.CycleID
	}
	return 0
}

func (m *QueryGetProducerbillinglineRequest) GetLineid() uint64 {
	if m != nil {
		return m.Lineid
	}
	return 0
}

func (m *QueryGetProducerbillinglineRequest) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

type QueryGetProducerbillinglineResponse struct {
	Producerbillingline Producerbillingline `protobuf:"bytes,1,opt,name=producerbillingline,proto3" json:"producerbillingline"`
}

func (m *QueryGetProducerbillinglineResponse) Reset()         { *m = QueryGetProducerbillinglineResponse{} }
func (m *QueryGetProducerbillinglineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerbillinglineResponse) ProtoMessage()    {}
func (*QueryGetProducerbillinglineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{37}
}
func (m *QueryGetProducerbillinglineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerbillinglineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerbillinglineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerbillinglineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerbillinglineResponse.Merge(m, src)
}
func (m *QueryGetProducerbillinglineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerbillinglineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerbillinglineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerbillinglineResponse proto.InternalMessageInfo

func (m *QueryGetProducerbillinglineResponse) GetProducerbillingline() Producerbillingline {
	if m != nil {
		return m.Producerbillingline
	}
	return Producerbillingline{}
}

type QueryAllProducerbillinglineRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerbillinglineRequest) Reset()         { *m = QueryAllProducerbillinglineRequest{} }
func (m *QueryAllProducerbillinglineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerbillinglineRequest) ProtoMessage()    {}
func (*QueryAllProducerbillinglineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{38}
}
func (m *QueryAllProducerbillinglineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerbillinglineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerbillinglineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerbillinglineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerbillinglineRequest.Merge(m, src)
}
func (m *QueryAllProducerbillinglineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerbillinglineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerbillinglineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerbillinglineRequest proto.InternalMessageInfo

func (m *QueryAllProducerbillinglineRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProducerbillinglineResponse struct {
	Producerbillingline []Producerbillingline `protobuf:"bytes,1,rep,name=producerbillingline,proto3" json:"producerbillingline"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerbillinglineResponse) Reset()         { *m = QueryAllProducerbillinglineResponse{} }
func (m *QueryAllProducerbillinglineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerbillinglineResponse) ProtoMessage()    {}
func (*QueryAllProducerbillinglineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{39}
}
func (m *QueryAllProducerbillinglineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerbillinglineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerbillinglineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerbillinglineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerbillinglineResponse.Merge(m, src)
}
func (m *QueryAllProducerbillinglineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerbillinglineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerbillinglineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerbillinglineResponse proto.InternalMessageInfo

func (m *QueryAllProducerbillinglineResponse) GetProducerbillingline() []Producerbillingline {
	if m != nil {
		return m.Producerbillingline
	}
	return nil
}

func (m *QueryAllProducerbillinglineResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetproducerbillRequest struct {
	ProducerDeviceID string             `protobuf:"bytes,1,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
	BillCycleID      uint64             `protobuf:"varint,2,opt,name=billCycleID,proto3" json:"billCycleID,omitempty"`
	Pagination       *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetproducerbillRequest) Reset()         { *m = QueryGetproducerbillRequest{} }
func (m *QueryGetproducerbillRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetproducerbillRequest) ProtoMessage()    {}
func (*QueryGetproducerbillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{40}
}
func (m *QueryGetproducerbillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetproducerbillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetproducerbillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetproducerbillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetproducerbillRequest.Merge(m, src)
}
func (m *QueryGetproducerbillRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetproducerbillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetproducerbillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetproducerbillRequest proto.InternalMessageInfo

func (m *QueryGetproducerbillRequest) GetProducerDeviceID() string {
	if m != nil {
		return m.ProducerDeviceID
	}
	return ""
}

func (m *QueryGetproducerbillRequest) GetBillCycleID() uint64 {
	if m != nil {
		return m.BillCycleID
	}
	return 0
}

func (m *QueryGetproducerbillRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetproducerbillResponse struct {
	Producerbillinglines []string            `protobuf:"bytes,1,rep,name=producerbillinglines,proto3" json:"producerbillinglines,omitempty"`
	BillTotalWh          uint64              `protobuf:"varint,2,opt,name=billTotalWh,proto3" json:"billTotalWh,omitempty"`
	BillTotalPrice       uint64              `protobuf:"varint,3,opt,name=billTotalPrice,proto3" json:"billTotalPrice,omitempty"`
	Curency              string              `protobuf:"bytes,4,opt,name=curency,proto3" json:"curency,omitempty"`
	Nblines              uint64              `protobuf:"varint,5,opt,name=nblines,proto3" json:"nblines,omitempty"`
	Comments             string              `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
	Pagination           *query.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetproducerbillResponse) Reset()         { *m = QueryGetproducerbillResponse{} }
func (m *QueryGetproducerbillResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetproducerbillResponse) ProtoMessage()    {}
func (*QueryGetproducerbillResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{41}
}
func (m *QueryGetproducerbillResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetproducerbillResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetproducerbillResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetproducerbillResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetproducerbillResponse.Merge(m, src)
}
func (m *QueryGetproducerbillResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetproducerbillResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetproducerbillResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetproducerbillResponse proto.InternalMessageInfo

func (m *QueryGetproducerbillResponse) GetProducerbillinglines() []string {
	if m != nil {
		return m.Producerbillinglines
	}
	return nil
}

func (m *QueryGetproducerbillResponse) GetBillTotalWh() uint64 {
	if m != nil {
		return m.BillTotalWh
	}
	return 0
}

func (m *QueryGetproducerbillResponse) GetBillTotalPrice() uint64 {
	if m != nil {
		return m.BillTotalPrice
	}
	return 0
}

func (m *QueryGetproducerbillResponse) GetCurency() string {
	if m != nil {
		return m.Curency
	}
	return ""
}

func (m *QueryGetproducerbillResponse) GetNblines() uint64 {
	if m != nil {
		return m.Nblines
	}
	return 0
}

func (m *QueryGetproducerbillResponse) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *QueryGetproducerbillResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProducerbillsRequest struct {
	BillCycleID      uint64 `protobuf:"varint,1,opt,name=billCycleID,proto3" json:"billCycleID,omitempty"`
	ProducerDeviceID string `protobuf:"bytes,2,opt,name=producerDeviceID,proto3" json:"producerDeviceID,omitempty"`
}

func (m *QueryGetProducerbillsRequest) Reset()         { *m = QueryGetProducerbillsRequest{} }
func (m *QueryGetProducerbillsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerbillsRequest) ProtoMessage()    {}
func (*QueryGetProducerbillsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{42}
}
func (m *QueryGetProducerbillsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerbillsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerbillsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerbillsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerbillsRequest.Merge(m, src)
}
func (m *QueryGetProducerbillsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerbillsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerbillsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerbillsRequest proto.InternalMessageInfo

func (m *QueryGetProducerbillsRequest) GetBillCycleID() uint64 {
	if m != nil {
		return m.BillCycleID
	}
	return 0
}

func (m *QueryGetProducerbillsRequest) GetProducerDeviceID() string {
	if m != nil {
		return m.ProducerDeviceID
	}
	return ""
}

type QueryGetProducerbillsResponse struct {
	Producerbills Producerbills `protobuf:"bytes,1,opt,name=producerbills,proto3" json:"producerbills"`
}

func (m *QueryGetProducerbillsResponse) Reset()         { *m = QueryGetProducerbillsResponse{} }
func (m *QueryGetProducerbillsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerbillsResponse) ProtoMessage()    {}
func (*QueryGetProducerbillsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{43}
}
func (m *QueryGetProducerbillsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerbillsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerbillsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerbillsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerbillsResponse.Merge(m, src)
}
func (m *QueryGetProducerbillsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerbillsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerbillsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerbillsResponse proto.InternalMessageInfo

func (m *QueryGetProducerbillsResponse) GetProducerbills() Producerbills {
	if m != nil {
		return m.Producerbills
	}
	return Producerbills{}
}

type QueryAllProducerbillsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerbillsRequest) Reset()         { *m = QueryAllProducerbillsRequest{} }
func (m *QueryAllProducerbillsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerbillsRequest) ProtoMessage()    {}
func (*QueryAllProducerbillsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{44}
}
func (m *QueryAllProducerbillsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerbillsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerbillsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerbillsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerbillsRequest.Merge(m, src)
}
func (m *QueryAllProducerbillsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerbillsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerbillsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerbillsRequest proto.InternalMessageInfo

func (m *QueryAllProducerbillsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProducerbillsResponse struct {
	Producerbills []Producerbills     `protobuf:"bytes,1,rep,name=producerbills,proto3" json:"producerbills"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerbillsResponse) Reset()         { *m = QueryAllProducerbillsResponse{} }
func (m *QueryAllProducerbillsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerbillsResponse) ProtoMessage()    {}
func (*QueryAllProducerbillsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_233f661d7643ff7a, []int{45}
}
func (m *QueryAllProducerbillsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerbillsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerbillsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerbillsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerbillsResponse.Merge(m, src)
}
func (m *QueryAllProducerbillsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerbillsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerbillsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerbillsResponse proto.InternalMessageInfo

func (m *QueryAllProducerbillsResponse) GetProducerbills() []Producerbills {
	if m != nil {
		return m.Producerbills
	}
	return nil
}

func (m *QueryAllProducerbillsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "electra.meter.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "electra.meter.QueryParamsResponse")
	proto.RegisterType((*QueryGetMeterreadingsRequest)(nil), "electra.meter.QueryGetMeterreadingsRequest")
	proto.RegisterType((*QueryGetMeterreadingsResponse)(nil), "electra.meter.QueryGetMeterreadingsResponse")
	proto.RegisterType((*QueryAllMeterreadingsRequest)(nil), "electra.meter.QueryAllMeterreadingsRequest")
	proto.RegisterType((*QueryAllMeterreadingsResponse)(nil), "electra.meter.QueryAllMeterreadingsResponse")
	proto.RegisterType((*QueryGetMeterdirectoryRequest)(nil), "electra.meter.QueryGetMeterdirectoryRequest")
	proto.RegisterType((*QueryGetMeterdirectoryResponse)(nil), "electra.meter.QueryGetMeterdirectoryResponse")
	proto.RegisterType((*QueryAllMeterdirectoryRequest)(nil), "electra.meter.QueryAllMeterdirectoryRequest")
	proto.RegisterType((*QueryAllMeterdirectoryResponse)(nil), "electra.meter.QueryAllMeterdirectoryResponse")
	proto.RegisterType((*QueryListrecordingsRequest)(nil), "electra.meter.QueryListrecordingsRequest")
	proto.RegisterType((*QueryListrecordingsResponse)(nil), "electra.meter.QueryListrecordingsResponse")
	proto.RegisterType((*QueryGetPowerPurchaseContractRequest)(nil), "electra.meter.QueryGetPowerPurchaseContractRequest")
	proto.RegisterType((*QueryGetPowerPurchaseContractResponse)(nil), "electra.meter.QueryGetPowerPurchaseContractResponse")
	proto.RegisterType((*QueryAllPowerPurchaseContractRequest)(nil), "electra.meter.QueryAllPowerPurchaseContractRequest")
	proto.RegisterType((*QueryAllPowerPurchaseContractResponse)(nil), "electra.meter.QueryAllPowerPurchaseContractResponse")
	proto.RegisterType((*QueryGetPpaMapRequest)(nil), "electra.meter.QueryGetPpaMapRequest")
	proto.RegisterType((*QueryGetPpaMapResponse)(nil), "electra.meter.QueryGetPpaMapResponse")
	proto.RegisterType((*QueryAllPpaMapRequest)(nil), "electra.meter.QueryAllPpaMapRequest")
	proto.RegisterType((*QueryAllPpaMapResponse)(nil), "electra.meter.QueryAllPpaMapResponse")
	proto.RegisterType((*QueryGetBillingcyclesRequest)(nil), "electra.meter.QueryGetBillingcyclesRequest")
	proto.RegisterType((*QueryGetBillingcyclesResponse)(nil), "electra.meter.QueryGetBillingcyclesResponse")
	proto.RegisterType((*QueryAllBillingcyclesRequest)(nil), "electra.meter.QueryAllBillingcyclesRequest")
	proto.RegisterType((*QueryAllBillingcyclesResponse)(nil), "electra.meter.QueryAllBillingcyclesResponse")
	proto.RegisterType((*QueryCurrentcycleIDRequest)(nil), "electra.meter.QueryCurrentcycleIDRequest")
	proto.RegisterType((*QueryCurrentcycleIDResponse)(nil), "electra.meter.QueryCurrentcycleIDResponse")
	proto.RegisterType((*QueryGetCustomerbillinglineRequest)(nil), "electra.meter.QueryGetCustomerbillinglineRequest")
	proto.RegisterType((*QueryGetCustomerbillinglineResponse)(nil), "electra.meter.QueryGetCustomerbillinglineResponse")
	proto.RegisterType((*QueryAllCustomerbillinglineRequest)(nil), "electra.meter.QueryAllCustomerbillinglineRequest")
	proto.RegisterType((*QueryAllCustomerbillinglineResponse)(nil), "electra.meter.QueryAllCustomerbillinglineResponse")
	proto.RegisterType((*QueryGetcustomerbillRequest)(nil), "electra.meter.QueryGetcustomerbillRequest")
	proto.RegisterType((*QueryGetcustomerbillResponse)(nil), "electra.meter.QueryGetcustomerbillResponse")
	proto.RegisterType((*QueryGetCustomerbillsRequest)(nil), "electra.meter.QueryGetCustomerbillsRequest")
	proto.RegisterType((*QueryGetCustomerbillsResponse)(nil), "electra.meter.QueryGetCustomerbillsResponse")
	proto.RegisterType((*QueryAllCustomerbillsRequest)(nil), "electra.meter.QueryAllCustomerbillsRequest")
	proto.RegisterType((*QueryAllCustomerbillsResponse)(nil), "electra.meter.QueryAllCustomerbillsResponse")
	proto.RegisterType((*QueryGetProducerbillinglineRequest)(nil), "electra.meter.QueryGetProducerbillinglineRequest")
	proto.RegisterType((*QueryGetProducerbillinglineResponse)(nil), "electra.meter.QueryGetProducerbillinglineResponse")
	proto.RegisterType((*QueryAllProducerbillinglineRequest)(nil), "electra.meter.QueryAllProducerbillinglineRequest")
	proto.RegisterType((*QueryAllProducerbillinglineResponse)(nil), "electra.meter.QueryAllProducerbillinglineResponse")
	proto.RegisterType((*QueryGetproducerbillRequest)(nil), "electra.meter.QueryGetproducerbillRequest")
	proto.RegisterType((*QueryGetproducerbillResponse)(nil), "electra.meter.QueryGetproducerbillResponse")
	proto.RegisterType((*QueryGetProducerbillsRequest)(nil), "electra.meter.QueryGetProducerbillsRequest")
	proto.RegisterType((*QueryGetProducerbillsResponse)(nil), "electra.meter.QueryGetProducerbillsResponse")
	proto.RegisterType((*QueryAllProducerbillsRequest)(nil), "electra.meter.QueryAllProducerbillsRequest")
	proto.RegisterType((*QueryAllProducerbillsResponse)(nil), "electra.meter.QueryAllProducerbillsResponse")
}

func init() { proto.RegisterFile("electra/meter/query.proto", fileDescriptor_233f661d7643ff7a) }

var fileDescriptor_233f661d7643ff7a = []byte{
	// 2108 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4f, 0x6f, 0x1b, 0x37,
	0x16, 0xf7, 0x58, 0x8a, 0x63, 0x33, 0xb0, 0x93, 0x65, 0x6c, 0xaf, 0x56, 0xb1, 0x15, 0x67, 0x56,
	0x71, 0xbc, 0xce, 0xae, 0x06, 0xb6, 0x77, 0x81, 0x60, 0x17, 0x8b, 0xac, 0xe3, 0x24, 0xce, 0x26,
	0x9b, 0x85, 0x57, 0xc8, 0xb6, 0x41, 0x0e, 0x75, 0x47, 0x23, 0x56, 0x1e, 0x60, 0x34, 0xa3, 0xcc,
	0x8c, 0x92, 0x18, 0x82, 0x0e, 0xed, 0xad, 0xa7, 0x16, 0x08, 0xd0, 0x02, 0xfd, 0x02, 0x3d, 0xf4,
	0x10, 0xb4, 0x69, 0xda, 0x4b, 0xd1, 0x73, 0xd0, 0x43, 0x11, 0xa4, 0x97, 0xf6, 0x52, 0x14, 0x49,
	0x3f, 0x48, 0x31, 0x1c, 0x72, 0x44, 0x52, 0xe4, 0x68, 0xac, 0xc8, 0x45, 0x2f, 0x86, 0xc8, 0x79,
	0x24, 0x7f, 0xbf, 0xf7, 0x87, 0x8f, 0x7c, 0x34, 0xf8, 0x03, 0x72, 0x90, 0x15, 0xfa, 0xa6, 0xd1,
	0x44, 0x21, 0xf2, 0x8d, 0xbb, 0x6d, 0xe4, 0xef, 0x57, 0x5a, 0xbe, 0x17, 0x7a, 0x70, 0x9a, 0x7c,
	0xaa, 0xe0, 0x4f, 0xc5, 0xd9, 0x86, 0xd7, 0xf0, 0xf0, 0x17, 0x23, 0xfa, 0x15, 0x0b, 0x15, 0x17,
	0x1a, 0x9e, 0xd7, 0x70, 0x90, 0x61, 0xb6, 0x6c, 0xc3, 0x74, 0x5d, 0x2f, 0x34, 0x43, 0xdb, 0x73,
	0x03, 0xf2, 0x75, 0xd5, 0xf2, 0x82, 0xa6, 0x17, 0x18, 0x35, 0x33, 0x40, 0xf1, 0xdc, 0xc6, 0xbd,
	0xb5, 0x1a, 0x0a, 0xcd, 0x35, 0xa3, 0x65, 0x36, 0x6c, 0x17, 0x0b, 0x13, 0xd9, 0x22, 0x8f, 0xa4,
	0x65, 0xfa, 0x66, 0x93, 0xce, 0x73, 0x86, 0xff, 0x86, 0xff, 0xfa, 0xc8, 0xac, 0xdb, 0x6e, 0x83,
	0x8a, 0xe8, 0x12, 0x91, 0xba, 0xed, 0x23, 0x2b, 0xf4, 0x28, 0xa3, 0xe2, 0x79, 0x61, 0x09, 0xef,
	0x3e, 0xf2, 0x77, 0x5b, 0x6d, 0xdf, 0xda, 0x33, 0x03, 0xb4, 0x6b, 0x79, 0x6e, 0xe8, 0x9b, 0x56,
	0x48, 0x84, 0x4f, 0x09, 0xc2, 0x2d, 0x73, 0xb7, 0x69, 0xb6, 0xe4, 0x80, 0x6a, 0xb6, 0xe3, 0xd8,
	0x6e, 0xc3, 0xda, 0xb7, 0x1c, 0x44, 0x01, 0x9d, 0xe3, 0x45, 0xac, 0x76, 0x10, 0x7a, 0x4d, 0xe4,
	0x13, 0x51, 0xc7, 0x76, 0x91, 0x7c, 0x2e, 0x56, 0x50, 0x31, 0x57, 0xcb, 0xf7, 0xea, 0x6d, 0x2b,
	0xc3, 0x5c, 0xac, 0x20, 0x99, 0x4b, 0x9f, 0x05, 0xf0, 0x7f, 0x91, 0x25, 0x76, 0xb0, 0x82, 0xab,
	0xe8, 0x6e, 0x1b, 0x05, 0xa1, 0x7e, 0x1d, 0x9c, 0xe4, 0x7a, 0x83, 0x96, 0xe7, 0x06, 0x08, 0x6e,
	0x80, 0x89, 0xd8, 0x10, 0x05, 0x6d, 0x49, 0x5b, 0x39, 0xb6, 0x3e, 0x57, 0xe1, 0x9c, 0xa2, 0x12,
	0x8b, 0x5f, 0xca, 0x3f, 0xfd, 0xf1, 0xf4, 0x58, 0x95, 0x88, 0xea, 0xb7, 0xc1, 0x02, 0x9e, 0x6b,
	0x1b, 0x85, 0x37, 0x59, 0x4b, 0x91, 0xb5, 0x60, 0x11, 0x4c, 0xd6, 0xd1, 0x3d, 0xdb, 0x42, 0xff,
	0xbe, 0x8c, 0xa7, 0x9d, 0xaa, 0x26, 0x6d, 0xb8, 0x00, 0xa6, 0x42, 0xbb, 0x89, 0x82, 0xd0, 0x6c,
	0xb6, 0x0a, 0xe3, 0x4b, 0xda, 0x4a, 0xbe, 0xda, 0xeb, 0xd0, 0x6d, 0xb0, 0xa8, 0x98, 0x99, 0xe0,
	0xbd, 0x06, 0xa6, 0x39, 0xe7, 0x20, 0xb0, 0x17, 0x04, 0xd8, 0xdc, 0x60, 0x82, 0x9e, 0x1f, 0xa8,
	0xbf, 0x45, 0x48, 0x6c, 0x3a, 0x8e, 0x94, 0xc4, 0x55, 0x00, 0x7a, 0x2e, 0x4c, 0x96, 0x59, 0xae,
	0xc4, 0xfe, 0x5e, 0x89, 0xfc, 0xbd, 0x12, 0xc7, 0x12, 0xf1, 0xf7, 0xca, 0x8e, 0xd9, 0x40, 0x64,
	0x6c, 0x95, 0x19, 0xa9, 0x7f, 0xa6, 0x11, 0x4e, 0xfd, 0x0b, 0xa9, 0x39, 0xe5, 0x86, 0xe2, 0x04,
	0xb7, 0x39, 0xcc, 0xe3, 0x18, 0xf3, 0xb9, 0x81, 0x98, 0x63, 0x18, 0x1c, 0x68, 0x53, 0xb0, 0x43,
	0x12, 0x68, 0x59, 0x4c, 0x5c, 0x06, 0xd3, 0x35, 0xd3, 0xb7, 0xbc, 0x3a, 0x0a, 0x90, 0x6f, 0x9b,
	0x0e, 0x06, 0x32, 0x55, 0xe5, 0x3b, 0xf5, 0x26, 0x28, 0xa9, 0x96, 0x20, 0x7a, 0xb9, 0x01, 0x66,
	0xf8, 0x28, 0x27, 0x56, 0x58, 0x94, 0x29, 0x26, 0x11, 0x22, 0x9a, 0x11, 0x86, 0xea, 0x0d, 0xc1,
	0x0a, 0x7d, 0x8c, 0x46, 0x65, 0xef, 0x2f, 0x34, 0x42, 0x4c, 0xb2, 0x52, 0x0a, 0xb1, 0xdc, 0x90,
	0xc4, 0x46, 0x67, 0xf3, 0xa7, 0x1a, 0x28, 0x62, 0xe0, 0xff, 0xb1, 0x83, 0xd0, 0x47, 0x96, 0xe7,
	0x67, 0x0e, 0xea, 0x59, 0x70, 0x24, 0x08, 0x4d, 0x3f, 0x24, 0x01, 0x1d, 0x37, 0xe0, 0x09, 0x90,
	0x43, 0x6e, 0xbd, 0x90, 0xc3, 0x7d, 0xd1, 0x4f, 0x58, 0x02, 0xa0, 0xb6, 0xff, 0x7f, 0xd7, 0x7e,
	0x70, 0xcb, 0x6e, 0xa2, 0x42, 0x7e, 0x49, 0x5b, 0x99, 0xac, 0x32, 0x3d, 0x82, 0x0d, 0x8e, 0x0c,
	0x6d, 0x83, 0xaf, 0x35, 0x70, 0x4a, 0x4a, 0x85, 0x18, 0xa0, 0x2c, 0x8b, 0xb8, 0x29, 0x31, 0x9a,
	0x8a, 0x60, 0xd2, 0xf2, 0x9a, 0x4d, 0xe4, 0x86, 0x01, 0x71, 0xe1, 0xa4, 0x1d, 0x31, 0x0e, 0xbd,
	0xd0, 0x74, 0x08, 0xbb, 0xb8, 0x21, 0xd8, 0x22, 0x3f, 0xbc, 0x2d, 0x7c, 0x50, 0xa6, 0xc1, 0xb1,
	0x13, 0x25, 0xb1, 0x1d, 0x92, 0xc3, 0xb6, 0x48, 0x0a, 0xa3, 0x46, 0x29, 0x01, 0x40, 0xb3, 0x5a,
	0x62, 0x16, 0xa6, 0x07, 0xae, 0x82, 0x13, 0xb4, 0x75, 0x99, 0x1a, 0x2f, 0xa6, 0xd2, 0xd7, 0xaf,
	0xbf, 0xab, 0x81, 0xb3, 0x03, 0x16, 0x25, 0xea, 0x7b, 0x13, 0xcc, 0xb5, 0x64, 0x02, 0x24, 0x6a,
	0xca, 0x62, 0x0e, 0x91, 0xc9, 0x12, 0x6f, 0x96, 0x4f, 0xa4, 0xbb, 0x84, 0xff, 0xa6, 0xe3, 0xa4,
	0xf2, 0x1f, 0x55, 0xd0, 0x3e, 0xa7, 0xdc, 0xd5, 0x0b, 0x0e, 0xe6, 0x9e, 0x1b, 0x09, 0xf7, 0xd1,
	0x05, 0xf4, 0x23, 0x0d, 0xcc, 0x25, 0x06, 0x6d, 0x99, 0x37, 0xcd, 0x16, 0x55, 0x5b, 0xec, 0x16,
	0x41, 0xbb, 0x89, 0xfc, 0xcb, 0x7c, 0x4c, 0xf7, 0xf5, 0xc3, 0x25, 0x70, 0xcc, 0x6c, 0xf8, 0x08,
	0x45, 0x7e, 0x9f, 0x78, 0x0f, 0xdb, 0x05, 0x57, 0xc0, 0xf1, 0xa4, 0xb9, 0x69, 0x85, 0xf6, 0x3d,
	0x84, 0xa3, 0x62, 0xb2, 0x2a, 0x76, 0x0b, 0xee, 0x9a, 0x17, 0xdd, 0x55, 0xbf, 0x09, 0xe6, 0x45,
	0xc0, 0xcc, 0x39, 0x05, 0xf7, 0xa8, 0xce, 0x29, 0xf8, 0x63, 0x72, 0x4e, 0xc1, 0x2d, 0x7d, 0x97,
	0xf0, 0x8f, 0x8c, 0xca, 0xf1, 0x1f, 0x95, 0xdb, 0x7c, 0xa0, 0x11, 0xc0, 0xcc, 0x0a, 0x12, 0xc0,
	0xb9, 0x8c, 0x80, 0x47, 0x67, 0xfa, 0x0b, 0xbd, 0x13, 0xda, 0x25, 0xf6, 0xe8, 0x4a, 0x15, 0x50,
	0x00, 0x47, 0x71, 0x07, 0xb1, 0x7b, 0xbe, 0x4a, 0x9b, 0xec, 0x09, 0x4c, 0x18, 0xd9, 0x3b, 0xad,
	0x70, 0xa7, 0x61, 0xc5, 0x09, 0x8c, 0x1b, 0x4c, 0x4f, 0x2b, 0xdc, 0x40, 0xf6, 0x04, 0x26, 0x05,
	0x79, 0x18, 0x27, 0xb0, 0xcc, 0x9c, 0x72, 0x43, 0x71, 0x1a, 0x9d, 0x05, 0x17, 0x48, 0x32, 0xde,
	0x6a, 0xfb, 0x3e, 0x72, 0x43, 0x62, 0x1e, 0x7a, 0x9a, 0xff, 0x81, 0x26, 0x38, 0xf1, 0x33, 0x21,
	0xa4, 0xb4, 0x6f, 0x94, 0xb8, 0x6a, 0xa8, 0x61, 0xbb, 0x34, 0x55, 0xe3, 0x86, 0x24, 0x55, 0x43,
	0x90, 0xbf, 0xbf, 0x67, 0xc7, 0x49, 0x2c, 0x5f, 0xc5, 0xbf, 0xa3, 0xb1, 0xf7, 0xf7, 0xbc, 0x76,
	0x88, 0x33, 0x73, 0xbe, 0x1a, 0x37, 0xa2, 0xb5, 0x9a, 0x9e, 0x8b, 0xf6, 0x6d, 0xb7, 0x30, 0x11,
	0xaf, 0x45, 0x9a, 0x51, 0x02, 0xc5, 0x3f, 0xa3, 0x21, 0x47, 0xf1, 0xa7, 0xa4, 0x8d, 0x11, 0xb6,
	0x7d, 0xe4, 0x5a, 0xfb, 0x85, 0x49, 0xbc, 0x0f, 0xd0, 0x66, 0x14, 0x54, 0x3a, 0x75, 0xc1, 0xad,
	0xfe, 0x4b, 0x15, 0xbb, 0x87, 0x91, 0xaf, 0x7d, 0x7b, 0x98, 0xd0, 0xcf, 0xaa, 0x63, 0x9c, 0x57,
	0xc7, 0x3c, 0x98, 0x88, 0x26, 0xb5, 0x29, 0x77, 0xd2, 0x8a, 0xe8, 0xb7, 0x4c, 0xbb, 0x4e, 0xce,
	0x28, 0xf8, 0xb7, 0xfe, 0xb6, 0x06, 0xfe, 0x98, 0x0a, 0x8c, 0x28, 0xff, 0x0e, 0x38, 0x29, 0xb9,
	0x0c, 0x12, 0x07, 0xd6, 0x05, 0x9f, 0x92, 0x4c, 0x44, 0x3c, 0x4b, 0x36, 0x89, 0xee, 0x10, 0xdd,
	0x6c, 0x3a, 0x4e, 0x8a, 0x6e, 0x46, 0x15, 0x39, 0xdf, 0x50, 0xc6, 0xaa, 0xe5, 0x06, 0x31, 0xce,
	0xbd, 0x32, 0xe3, 0xd1, 0x45, 0xd4, 0x63, 0x1a, 0x33, 0xdb, 0x28, 0x64, 0x17, 0x1a, 0xc6, 0xa1,
	0x96, 0xc0, 0xb1, 0x68, 0xe8, 0x16, 0xe7, 0x54, 0x6c, 0x97, 0x60, 0x82, 0xdc, 0xd0, 0x26, 0xf8,
	0x72, 0xbc, 0xb7, 0x95, 0xf3, 0xa8, 0x89, 0xee, 0xd7, 0xc1, 0xac, 0x44, 0x6d, 0xf4, 0x48, 0x2b,
	0xfd, 0x46, 0xe1, 0xdf, 0x8a, 0x0e, 0xad, 0xaf, 0xef, 0xb1, 0xf0, 0x49, 0x17, 0x5c, 0x06, 0x33,
	0x49, 0x73, 0xc7, 0xb7, 0x2d, 0x44, 0xe2, 0x43, 0xe8, 0xc5, 0x67, 0x64, 0xbc, 0x05, 0x59, 0xfb,
	0x24, 0x9f, 0x27, 0xed, 0x28, 0xea, 0xdc, 0x5a, 0x0c, 0x26, 0xde, 0x30, 0x68, 0x93, 0x3b, 0x59,
	0x4f, 0x08, 0x27, 0x6b, 0xde, 0xde, 0x47, 0x87, 0xb7, 0xb7, 0xd3, 0x53, 0x1c, 0xeb, 0x72, 0x49,
	0x7a, 0x11, 0x6c, 0xa8, 0xf5, 0xdb, 0x50, 0xe6, 0x11, 0xe3, 0x72, 0x8f, 0x60, 0xf3, 0xa6, 0xb0,
	0x5a, 0x2f, 0xc7, 0x70, 0x95, 0x1f, 0x45, 0xde, 0xe4, 0x06, 0xd3, 0x1c, 0xc3, 0x0d, 0x64, 0xf3,
	0xa6, 0x94, 0xd8, 0x61, 0xe4, 0xcd, 0xcc, 0x9c, 0x72, 0x43, 0x71, 0x1a, 0x5d, 0x94, 0xb3, 0xd9,
	0x63, 0xa7, 0xbf, 0x8c, 0xc6, 0x04, 0x3b, 0xad, 0x9d, 0x89, 0xc1, 0x2e, 0xf6, 0x1f, 0x42, 0xf6,
	0x90, 0x02, 0xeb, 0xed, 0xa5, 0x92, 0xf2, 0x9f, 0x22, 0x7b, 0x48, 0x26, 0xa2, 0x7b, 0xa9, 0x64,
	0x12, 0x36, 0x7b, 0xa4, 0xe8, 0xe6, 0x30, 0xb2, 0xc7, 0x50, 0x8c, 0x73, 0xaf, 0xcc, 0xf8, 0x70,
	0xb2, 0x07, 0xbb, 0xd0, 0x30, 0x0e, 0xf5, 0xeb, 0x65, 0x8f, 0x27, 0x4c, 0xf6, 0xe0, 0x51, 0xf7,
	0xb2, 0x87, 0x44, 0x6d, 0x49, 0xf6, 0x90, 0x7d, 0x1b, 0x61, 0xf6, 0x60, 0x0e, 0x81, 0x79, 0xee,
	0x10, 0xf8, 0x1b, 0xca, 0x1d, 0xac, 0xc3, 0x1d, 0x2c, 0x77, 0xf4, 0xf9, 0xc3, 0xb8, 0xdc, 0x1f,
	0xd8, 0xdc, 0x21, 0xac, 0xd6, 0xdb, 0x67, 0xb9, 0x4a, 0xbf, 0x22, 0x77, 0x70, 0x83, 0xe9, 0x3e,
	0xcb, 0x0d, 0x64, 0x73, 0x87, 0x94, 0xd8, 0x61, 0xe4, 0x8e, 0xcc, 0x9c, 0x72, 0x43, 0x71, 0x1a,
	0x59, 0x8c, 0xaf, 0x7f, 0x55, 0x02, 0x47, 0x30, 0x68, 0xe8, 0x82, 0x89, 0xf8, 0xe5, 0x03, 0x9e,
	0x11, 0xf0, 0xf4, 0x3f, 0xad, 0x14, 0xf5, 0x34, 0x91, 0x78, 0x19, 0x7d, 0xf1, 0x9d, 0xef, 0x7e,
	0x7e, 0x38, 0xfe, 0x7b, 0x38, 0x67, 0xc8, 0x5e, 0xc1, 0xe0, 0xc7, 0x1a, 0x98, 0xe6, 0xea, 0xfb,
	0xf0, 0xbc, 0x6c, 0x52, 0xc5, 0x83, 0x4b, 0xf1, 0xcf, 0xd9, 0x84, 0x09, 0x96, 0x7f, 0x60, 0x2c,
	0x7f, 0x83, 0x1b, 0x46, 0xca, 0xab, 0x9b, 0xd1, 0xa1, 0xd5, 0xdd, 0xae, 0xd1, 0x49, 0x1e, 0x68,
	0xba, 0xf0, 0xa1, 0x06, 0x4e, 0x70, 0xd3, 0x6e, 0x3a, 0x8e, 0x1c, 0xac, 0xe2, 0x61, 0x45, 0x0e,
	0x56, 0xf5, 0x38, 0xa2, 0x97, 0x31, 0xd8, 0x12, 0x5c, 0x48, 0x03, 0x0b, 0x1f, 0x69, 0x60, 0x86,
	0xaf, 0x96, 0xc3, 0x54, 0x9d, 0x88, 0xd5, 0xff, 0xe2, 0x5f, 0x32, 0x4a, 0x13, 0x54, 0xff, 0xc2,
	0xa8, 0xfe, 0x0e, 0x2f, 0x18, 0x69, 0xaf, 0x92, 0x9c, 0x0e, 0xb9, 0xd7, 0x8f, 0x2e, 0xfc, 0x50,
	0x03, 0xbf, 0xe3, 0x27, 0x8f, 0x14, 0x99, 0xaa, 0x9b, 0x6c, 0xa0, 0x95, 0xcf, 0x0e, 0xfa, 0x59,
	0x0c, 0xfa, 0x34, 0x5c, 0x4c, 0x05, 0x0d, 0x3f, 0xd7, 0xc0, 0x0c, 0x5f, 0x37, 0x87, 0x7f, 0x92,
	0x2d, 0x24, 0x7d, 0x26, 0x28, 0xae, 0x66, 0x11, 0x25, 0x80, 0x6e, 0x60, 0x40, 0x57, 0xe0, 0x96,
	0x00, 0xc8, 0xe1, 0xc4, 0x39, 0x2d, 0xe2, 0x97, 0x85, 0xae, 0xd1, 0x41, 0x6e, 0x3d, 0xd2, 0x69,
	0xf2, 0x74, 0xd0, 0x85, 0xcf, 0x35, 0x30, 0x27, 0xad, 0xb6, 0xc2, 0x0d, 0x85, 0x6d, 0xd3, 0x2a,
	0xcb, 0xc5, 0xbf, 0x1e, 0x6c, 0x10, 0x61, 0xf4, 0x5f, 0xcc, 0xe8, 0x1a, 0xbc, 0x6a, 0x64, 0x7a,
	0x89, 0x36, 0x3a, 0xbd, 0xe2, 0x67, 0xb7, 0xd7, 0xa0, 0x89, 0xa1, 0x0b, 0x9f, 0x68, 0xa0, 0x20,
	0x5d, 0x31, 0x72, 0x96, 0x0d, 0x85, 0xf9, 0x0f, 0xce, 0x6b, 0x50, 0xd5, 0x5b, 0xaf, 0x60, 0x5e,
	0x2b, 0x70, 0x39, 0x1b, 0xaf, 0x08, 0xf7, 0x44, 0x5c, 0xe1, 0x84, 0x65, 0x95, 0x22, 0xd9, 0x8a,
	0x6c, 0xf1, 0xec, 0x00, 0x29, 0x82, 0xe3, 0x0d, 0x8c, 0xe3, 0x36, 0x7c, 0xcd, 0x90, 0x3e, 0xde,
	0x63, 0x15, 0x72, 0xe5, 0xeb, 0xae, 0xd1, 0x61, 0x4a, 0xd5, 0x6c, 0x2b, 0x2e, 0x49, 0x77, 0x39,
	0x13, 0xc0, 0x07, 0x60, 0x2a, 0x5e, 0x31, 0xd2, 0x6f, 0x59, 0xa5, 0xaa, 0xc1, 0xc8, 0xfb, 0xea,
	0xc1, 0x7a, 0x09, 0x23, 0x2f, 0xc0, 0x79, 0x39, 0x72, 0xf8, 0x91, 0x06, 0xa6, 0xb9, 0xfa, 0xa2,
	0x32, 0x03, 0xc8, 0x6a, 0xa5, 0xca, 0x0c, 0x20, 0xad, 0x77, 0x2a, 0xcd, 0xc9, 0xd5, 0x32, 0x8d,
	0x0e, 0xb9, 0xe6, 0xc4, 0x9b, 0x3e, 0x37, 0x53, 0xda, 0xa6, 0x9f, 0x1d, 0x9f, 0xaa, 0x1e, 0xab,
	0xdc, 0xf4, 0xf9, 0x5a, 0xeb, 0x7b, 0x1a, 0x98, 0xe1, 0xeb, 0x9f, 0xf2, 0x8d, 0x4a, 0x5a, 0x42,
	0x95, 0x6f, 0x54, 0xf2, 0x72, 0xaa, 0xbe, 0x8c, 0xf1, 0x2c, 0xc1, 0x92, 0x21, 0xfe, 0x2b, 0x47,
	0x4f, 0x7c, 0xd7, 0xae, 0xc3, 0x6f, 0x35, 0x70, 0x52, 0x52, 0xde, 0x82, 0x6b, 0x0a, 0xeb, 0xa8,
	0x4b, 0x78, 0xc5, 0xf5, 0x83, 0x0c, 0x21, 0x30, 0x77, 0x30, 0xcc, 0xeb, 0xf0, 0x9a, 0x31, 0xf0,
	0x5f, 0x53, 0x8c, 0x8e, 0x58, 0xc1, 0xe8, 0xf6, 0xec, 0x6d, 0x74, 0xe2, 0x7b, 0x6c, 0x17, 0x7e,
	0xa2, 0x81, 0x79, 0xc9, 0x8a, 0x91, 0xf9, 0xd7, 0x14, 0x16, 0x3d, 0x28, 0xa7, 0xf4, 0xd2, 0xa2,
	0xbe, 0x8a, 0x39, 0x95, 0xa1, 0x3e, 0x98, 0x13, 0x7c, 0xac, 0x81, 0xe3, 0x42, 0x99, 0x0c, 0xae,
	0x2a, 0xf4, 0x28, 0xa9, 0x00, 0x16, 0xcf, 0x67, 0x92, 0x25, 0xc0, 0xb6, 0x31, 0xb0, 0x4d, 0x78,
	0x51, 0x00, 0xd6, 0xe0, 0xe5, 0xa5, 0x8a, 0x66, 0x2e, 0x0a, 0x5d, 0xf8, 0xa9, 0x06, 0xa6, 0xb9,
	0x0a, 0x89, 0x32, 0xf2, 0x65, 0xd5, 0x1e, 0x65, 0xe4, 0x4b, 0x2b, 0x36, 0xfa, 0x15, 0x8c, 0xfa,
	0x22, 0xfc, 0x67, 0x8a, 0x3a, 0x03, 0x1e, 0xa0, 0x84, 0x01, 0xde, 0x10, 0xb8, 0x05, 0xd2, 0x36,
	0x84, 0xec, 0xb0, 0x55, 0x85, 0x26, 0xe5, 0x86, 0xc0, 0x17, 0x91, 0xa2, 0xf0, 0x93, 0xd4, 0x07,
	0x94, 0xe1, 0xa7, 0xae, 0x81, 0x28, 0xc3, 0x2f, 0xa5, 0x8e, 0xa1, 0x0c, 0x3f, 0xc9, 0x25, 0xda,
	0xe8, 0x88, 0x97, 0x40, 0x65, 0xf8, 0x49, 0x56, 0x4c, 0x0b, 0xbf, 0x83, 0x72, 0x4a, 0xaf, 0xcd,
	0x28, 0xc3, 0x4f, 0x56, 0x6b, 0x21, 0xe1, 0xc7, 0x7e, 0x52, 0x86, 0x9f, 0xa4, 0x84, 0xa2, 0x0c,
	0x3f, 0x59, 0xe1, 0x22, 0x2d, 0xfc, 0x58, 0x79, 0xa9, 0xa2, 0xfb, 0xc2, 0x8f, 0xbb, 0x64, 0x2a,
	0xc3, 0x4f, 0x76, 0x61, 0x56, 0x86, 0x9f, 0xf4, 0xd2, 0xab, 0x0c, 0x3f, 0xee, 0x42, 0x2b, 0x86,
	0x5f, 0x1f, 0x03, 0x1c, 0x7e, 0xdc, 0x02, 0x69, 0xe1, 0x97, 0x1d, 0xb6, 0xea, 0xae, 0xae, 0x0c,
	0x3f, 0x0e, 0xf6, 0x25, 0xe3, 0xe9, 0x8b, 0x92, 0xf6, 0xec, 0x45, 0x49, 0xfb, 0xe9, 0x45, 0x49,
	0x7b, 0xff, 0x65, 0x69, 0xec, 0xd9, 0xcb, 0xd2, 0xd8, 0xf7, 0x2f, 0x4b, 0x63, 0x77, 0xe6, 0xe8,
	0xb0, 0x07, 0x64, 0x60, 0xb8, 0xdf, 0x42, 0x41, 0x6d, 0x02, 0xff, 0xc3, 0xe2, 0xc6, 0x2f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x99, 0xd6, 0x02, 0xda, 0xa4, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Meterreadings by index.
	Meterreadings(ctx context.Context, in *QueryGetMeterreadingsRequest, opts ...grpc.CallOption) (*QueryGetMeterreadingsResponse, error)
	// Queries a list of Meterreadings items.
	MeterreadingsAll(ctx context.Context, in *QueryAllMeterreadingsRequest, opts ...grpc.CallOption) (*QueryAllMeterreadingsResponse, error)
	// Queries a Meterdirectory by index.
	Meterdirectory(ctx context.Context, in *QueryGetMeterdirectoryRequest, opts ...grpc.CallOption) (*QueryGetMeterdirectoryResponse, error)
	// Queries a list of Meterdirectory items.
	MeterdirectoryAll(ctx context.Context, in *QueryAllMeterdirectoryRequest, opts ...grpc.CallOption) (*QueryAllMeterdirectoryResponse, error)
	// Queries a list of Listrecordings items.
	Listrecordings(ctx context.Context, in *QueryListrecordingsRequest, opts ...grpc.CallOption) (*QueryListrecordingsResponse, error)
	// Queries a PowerPurchaseContract by index.
	PowerPurchaseContract(ctx context.Context, in *QueryGetPowerPurchaseContractRequest, opts ...grpc.CallOption) (*QueryGetPowerPurchaseContractResponse, error)
	// Queries a list of PowerPurchaseContract items.
	PowerPurchaseContractAll(ctx context.Context, in *QueryAllPowerPurchaseContractRequest, opts ...grpc.CallOption) (*QueryAllPowerPurchaseContractResponse, error)
	// Queries a PpaMap by index.
	PpaMap(ctx context.Context, in *QueryGetPpaMapRequest, opts ...grpc.CallOption) (*QueryGetPpaMapResponse, error)
	// Queries a list of PpaMap items.
	PpaMapAll(ctx context.Context, in *QueryAllPpaMapRequest, opts ...grpc.CallOption) (*QueryAllPpaMapResponse, error)
	// Queries a Billingcycles by index.
	Billingcycles(ctx context.Context, in *QueryGetBillingcyclesRequest, opts ...grpc.CallOption) (*QueryGetBillingcyclesResponse, error)
	// Queries a list of Billingcycles items.
	BillingcyclesAll(ctx context.Context, in *QueryAllBillingcyclesRequest, opts ...grpc.CallOption) (*QueryAllBillingcyclesResponse, error)
	// Queries a list of CurrentcycleID items.
	CurrentcycleID(ctx context.Context, in *QueryCurrentcycleIDRequest, opts ...grpc.CallOption) (*QueryCurrentcycleIDResponse, error)
	// Queries a Customerbillingline by index.
	Customerbillingline(ctx context.Context, in *QueryGetCustomerbillinglineRequest, opts ...grpc.CallOption) (*QueryGetCustomerbillinglineResponse, error)
	// Queries a list of Customerbillingline items.
	CustomerbillinglineAll(ctx context.Context, in *QueryAllCustomerbillinglineRequest, opts ...grpc.CallOption) (*QueryAllCustomerbillinglineResponse, error)
	// Queries a list of Getcustomerbill items.
	Getcustomerbill(ctx context.Context, in *QueryGetcustomerbillRequest, opts ...grpc.CallOption) (*QueryGetcustomerbillResponse, error)
	// Queries a Customerbills by index.
	Customerbills(ctx context.Context, in *QueryGetCustomerbillsRequest, opts ...grpc.CallOption) (*QueryGetCustomerbillsResponse, error)
	// Queries a list of Customerbills items.
	CustomerbillsAll(ctx context.Context, in *QueryAllCustomerbillsRequest, opts ...grpc.CallOption) (*QueryAllCustomerbillsResponse, error)
	// Queries a Producerbillingline by index.
	Producerbillingline(ctx context.Context, in *QueryGetProducerbillinglineRequest, opts ...grpc.CallOption) (*QueryGetProducerbillinglineResponse, error)
	// Queries a list of Producerbillingline items.
	ProducerbillinglineAll(ctx context.Context, in *QueryAllProducerbillinglineRequest, opts ...grpc.CallOption) (*QueryAllProducerbillinglineResponse, error)
	// Queries a list of Getproducerbill items.
	Getproducerbill(ctx context.Context, in *QueryGetproducerbillRequest, opts ...grpc.CallOption) (*QueryGetproducerbillResponse, error)
	// Queries a Producerbills by index.
	Producerbills(ctx context.Context, in *QueryGetProducerbillsRequest, opts ...grpc.CallOption) (*QueryGetProducerbillsResponse, error)
	// Queries a list of Producerbills items.
	ProducerbillsAll(ctx context.Context, in *QueryAllProducerbillsRequest, opts ...grpc.CallOption) (*QueryAllProducerbillsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Meterreadings(ctx context.Context, in *QueryGetMeterreadingsRequest, opts ...grpc.CallOption) (*QueryGetMeterreadingsResponse, error) {
	out := new(QueryGetMeterreadingsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Meterreadings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeterreadingsAll(ctx context.Context, in *QueryAllMeterreadingsRequest, opts ...grpc.CallOption) (*QueryAllMeterreadingsResponse, error) {
	out := new(QueryAllMeterreadingsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/MeterreadingsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Meterdirectory(ctx context.Context, in *QueryGetMeterdirectoryRequest, opts ...grpc.CallOption) (*QueryGetMeterdirectoryResponse, error) {
	out := new(QueryGetMeterdirectoryResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Meterdirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeterdirectoryAll(ctx context.Context, in *QueryAllMeterdirectoryRequest, opts ...grpc.CallOption) (*QueryAllMeterdirectoryResponse, error) {
	out := new(QueryAllMeterdirectoryResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/MeterdirectoryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Listrecordings(ctx context.Context, in *QueryListrecordingsRequest, opts ...grpc.CallOption) (*QueryListrecordingsResponse, error) {
	out := new(QueryListrecordingsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Listrecordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PowerPurchaseContract(ctx context.Context, in *QueryGetPowerPurchaseContractRequest, opts ...grpc.CallOption) (*QueryGetPowerPurchaseContractResponse, error) {
	out := new(QueryGetPowerPurchaseContractResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/PowerPurchaseContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PowerPurchaseContractAll(ctx context.Context, in *QueryAllPowerPurchaseContractRequest, opts ...grpc.CallOption) (*QueryAllPowerPurchaseContractResponse, error) {
	out := new(QueryAllPowerPurchaseContractResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/PowerPurchaseContractAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PpaMap(ctx context.Context, in *QueryGetPpaMapRequest, opts ...grpc.CallOption) (*QueryGetPpaMapResponse, error) {
	out := new(QueryGetPpaMapResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/PpaMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PpaMapAll(ctx context.Context, in *QueryAllPpaMapRequest, opts ...grpc.CallOption) (*QueryAllPpaMapResponse, error) {
	out := new(QueryAllPpaMapResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/PpaMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Billingcycles(ctx context.Context, in *QueryGetBillingcyclesRequest, opts ...grpc.CallOption) (*QueryGetBillingcyclesResponse, error) {
	out := new(QueryGetBillingcyclesResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Billingcycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BillingcyclesAll(ctx context.Context, in *QueryAllBillingcyclesRequest, opts ...grpc.CallOption) (*QueryAllBillingcyclesResponse, error) {
	out := new(QueryAllBillingcyclesResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/BillingcyclesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentcycleID(ctx context.Context, in *QueryCurrentcycleIDRequest, opts ...grpc.CallOption) (*QueryCurrentcycleIDResponse, error) {
	out := new(QueryCurrentcycleIDResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/CurrentcycleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Customerbillingline(ctx context.Context, in *QueryGetCustomerbillinglineRequest, opts ...grpc.CallOption) (*QueryGetCustomerbillinglineResponse, error) {
	out := new(QueryGetCustomerbillinglineResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Customerbillingline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustomerbillinglineAll(ctx context.Context, in *QueryAllCustomerbillinglineRequest, opts ...grpc.CallOption) (*QueryAllCustomerbillinglineResponse, error) {
	out := new(QueryAllCustomerbillinglineResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/CustomerbillinglineAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Getcustomerbill(ctx context.Context, in *QueryGetcustomerbillRequest, opts ...grpc.CallOption) (*QueryGetcustomerbillResponse, error) {
	out := new(QueryGetcustomerbillResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Getcustomerbill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Customerbills(ctx context.Context, in *QueryGetCustomerbillsRequest, opts ...grpc.CallOption) (*QueryGetCustomerbillsResponse, error) {
	out := new(QueryGetCustomerbillsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Customerbills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustomerbillsAll(ctx context.Context, in *QueryAllCustomerbillsRequest, opts ...grpc.CallOption) (*QueryAllCustomerbillsResponse, error) {
	out := new(QueryAllCustomerbillsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/CustomerbillsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Producerbillingline(ctx context.Context, in *QueryGetProducerbillinglineRequest, opts ...grpc.CallOption) (*QueryGetProducerbillinglineResponse, error) {
	out := new(QueryGetProducerbillinglineResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Producerbillingline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProducerbillinglineAll(ctx context.Context, in *QueryAllProducerbillinglineRequest, opts ...grpc.CallOption) (*QueryAllProducerbillinglineResponse, error) {
	out := new(QueryAllProducerbillinglineResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/ProducerbillinglineAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Getproducerbill(ctx context.Context, in *QueryGetproducerbillRequest, opts ...grpc.CallOption) (*QueryGetproducerbillResponse, error) {
	out := new(QueryGetproducerbillResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Getproducerbill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Producerbills(ctx context.Context, in *QueryGetProducerbillsRequest, opts ...grpc.CallOption) (*QueryGetProducerbillsResponse, error) {
	out := new(QueryGetProducerbillsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/Producerbills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProducerbillsAll(ctx context.Context, in *QueryAllProducerbillsRequest, opts ...grpc.CallOption) (*QueryAllProducerbillsResponse, error) {
	out := new(QueryAllProducerbillsResponse)
	err := c.cc.Invoke(ctx, "/electra.meter.Query/ProducerbillsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Meterreadings by index.
	Meterreadings(context.Context, *QueryGetMeterreadingsRequest) (*QueryGetMeterreadingsResponse, error)
	// Queries a list of Meterreadings items.
	MeterreadingsAll(context.Context, *QueryAllMeterreadingsRequest) (*QueryAllMeterreadingsResponse, error)
	// Queries a Meterdirectory by index.
	Meterdirectory(context.Context, *QueryGetMeterdirectoryRequest) (*QueryGetMeterdirectoryResponse, error)
	// Queries a list of Meterdirectory items.
	MeterdirectoryAll(context.Context, *QueryAllMeterdirectoryRequest) (*QueryAllMeterdirectoryResponse, error)
	// Queries a list of Listrecordings items.
	Listrecordings(context.Context, *QueryListrecordingsRequest) (*QueryListrecordingsResponse, error)
	// Queries a PowerPurchaseContract by index.
	PowerPurchaseContract(context.Context, *QueryGetPowerPurchaseContractRequest) (*QueryGetPowerPurchaseContractResponse, error)
	// Queries a list of PowerPurchaseContract items.
	PowerPurchaseContractAll(context.Context, *QueryAllPowerPurchaseContractRequest) (*QueryAllPowerPurchaseContractResponse, error)
	// Queries a PpaMap by index.
	PpaMap(context.Context, *QueryGetPpaMapRequest) (*QueryGetPpaMapResponse, error)
	// Queries a list of PpaMap items.
	PpaMapAll(context.Context, *QueryAllPpaMapRequest) (*QueryAllPpaMapResponse, error)
	// Queries a Billingcycles by index.
	Billingcycles(context.Context, *QueryGetBillingcyclesRequest) (*QueryGetBillingcyclesResponse, error)
	// Queries a list of Billingcycles items.
	BillingcyclesAll(context.Context, *QueryAllBillingcyclesRequest) (*QueryAllBillingcyclesResponse, error)
	// Queries a list of CurrentcycleID items.
	CurrentcycleID(context.Context, *QueryCurrentcycleIDRequest) (*QueryCurrentcycleIDResponse, error)
	// Queries a Customerbillingline by index.
	Customerbillingline(context.Context, *QueryGetCustomerbillinglineRequest) (*QueryGetCustomerbillinglineResponse, error)
	// Queries a list of Customerbillingline items.
	CustomerbillinglineAll(context.Context, *QueryAllCustomerbillinglineRequest) (*QueryAllCustomerbillinglineResponse, error)
	// Queries a list of Getcustomerbill items.
	Getcustomerbill(context.Context, *QueryGetcustomerbillRequest) (*QueryGetcustomerbillResponse, error)
	// Queries a Customerbills by index.
	Customerbills(context.Context, *QueryGetCustomerbillsRequest) (*QueryGetCustomerbillsResponse, error)
	// Queries a list of Customerbills items.
	CustomerbillsAll(context.Context, *QueryAllCustomerbillsRequest) (*QueryAllCustomerbillsResponse, error)
	// Queries a Producerbillingline by index.
	Producerbillingline(context.Context, *QueryGetProducerbillinglineRequest) (*QueryGetProducerbillinglineResponse, error)
	// Queries a list of Producerbillingline items.
	ProducerbillinglineAll(context.Context, *QueryAllProducerbillinglineRequest) (*QueryAllProducerbillinglineResponse, error)
	// Queries a list of Getproducerbill items.
	Getproducerbill(context.Context, *QueryGetproducerbillRequest) (*QueryGetproducerbillResponse, error)
	// Queries a Producerbills by index.
	Producerbills(context.Context, *QueryGetProducerbillsRequest) (*QueryGetProducerbillsResponse, error)
	// Queries a list of Producerbills items.
	ProducerbillsAll(context.Context, *QueryAllProducerbillsRequest) (*QueryAllProducerbillsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Meterreadings(ctx context.Context, req *QueryGetMeterreadingsRequest) (*QueryGetMeterreadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meterreadings not implemented")
}
func (*UnimplementedQueryServer) MeterreadingsAll(ctx context.Context, req *QueryAllMeterreadingsRequest) (*QueryAllMeterreadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterreadingsAll not implemented")
}
func (*UnimplementedQueryServer) Meterdirectory(ctx context.Context, req *QueryGetMeterdirectoryRequest) (*QueryGetMeterdirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meterdirectory not implemented")
}
func (*UnimplementedQueryServer) MeterdirectoryAll(ctx context.Context, req *QueryAllMeterdirectoryRequest) (*QueryAllMeterdirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterdirectoryAll not implemented")
}
func (*UnimplementedQueryServer) Listrecordings(ctx context.Context, req *QueryListrecordingsRequest) (*QueryListrecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listrecordings not implemented")
}
func (*UnimplementedQueryServer) PowerPurchaseContract(ctx context.Context, req *QueryGetPowerPurchaseContractRequest) (*QueryGetPowerPurchaseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerPurchaseContract not implemented")
}
func (*UnimplementedQueryServer) PowerPurchaseContractAll(ctx context.Context, req *QueryAllPowerPurchaseContractRequest) (*QueryAllPowerPurchaseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerPurchaseContractAll not implemented")
}
func (*UnimplementedQueryServer) PpaMap(ctx context.Context, req *QueryGetPpaMapRequest) (*QueryGetPpaMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpaMap not implemented")
}
func (*UnimplementedQueryServer) PpaMapAll(ctx context.Context, req *QueryAllPpaMapRequest) (*QueryAllPpaMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PpaMapAll not implemented")
}
func (*UnimplementedQueryServer) Billingcycles(ctx context.Context, req *QueryGetBillingcyclesRequest) (*QueryGetBillingcyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Billingcycles not implemented")
}
func (*UnimplementedQueryServer) BillingcyclesAll(ctx context.Context, req *QueryAllBillingcyclesRequest) (*QueryAllBillingcyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillingcyclesAll not implemented")
}
func (*UnimplementedQueryServer) CurrentcycleID(ctx context.Context, req *QueryCurrentcycleIDRequest) (*QueryCurrentcycleIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentcycleID not implemented")
}
func (*UnimplementedQueryServer) Customerbillingline(ctx context.Context, req *QueryGetCustomerbillinglineRequest) (*QueryGetCustomerbillinglineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Customerbillingline not implemented")
}
func (*UnimplementedQueryServer) CustomerbillinglineAll(ctx context.Context, req *QueryAllCustomerbillinglineRequest) (*QueryAllCustomerbillinglineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerbillinglineAll not implemented")
}
func (*UnimplementedQueryServer) Getcustomerbill(ctx context.Context, req *QueryGetcustomerbillRequest) (*QueryGetcustomerbillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getcustomerbill not implemented")
}
func (*UnimplementedQueryServer) Customerbills(ctx context.Context, req *QueryGetCustomerbillsRequest) (*QueryGetCustomerbillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Customerbills not implemented")
}
func (*UnimplementedQueryServer) CustomerbillsAll(ctx context.Context, req *QueryAllCustomerbillsRequest) (*QueryAllCustomerbillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerbillsAll not implemented")
}
func (*UnimplementedQueryServer) Producerbillingline(ctx context.Context, req *QueryGetProducerbillinglineRequest) (*QueryGetProducerbillinglineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Producerbillingline not implemented")
}
func (*UnimplementedQueryServer) ProducerbillinglineAll(ctx context.Context, req *QueryAllProducerbillinglineRequest) (*QueryAllProducerbillinglineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerbillinglineAll not implemented")
}
func (*UnimplementedQueryServer) Getproducerbill(ctx context.Context, req *QueryGetproducerbillRequest) (*QueryGetproducerbillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getproducerbill not implemented")
}
func (*UnimplementedQueryServer) Producerbills(ctx context.Context, req *QueryGetProducerbillsRequest) (*QueryGetProducerbillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Producerbills not implemented")
}
func (*UnimplementedQueryServer) ProducerbillsAll(ctx context.Context, req *QueryAllProducerbillsRequest) (*QueryAllProducerbillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerbillsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Meterreadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMeterreadingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Meterreadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Meterreadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Meterreadings(ctx, req.(*QueryGetMeterreadingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeterreadingsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMeterreadingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeterreadingsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/MeterreadingsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeterreadingsAll(ctx, req.(*QueryAllMeterreadingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Meterdirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMeterdirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Meterdirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Meterdirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Meterdirectory(ctx, req.(*QueryGetMeterdirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeterdirectoryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMeterdirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeterdirectoryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/MeterdirectoryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeterdirectoryAll(ctx, req.(*QueryAllMeterdirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Listrecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListrecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Listrecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Listrecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Listrecordings(ctx, req.(*QueryListrecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PowerPurchaseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPowerPurchaseContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PowerPurchaseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/PowerPurchaseContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PowerPurchaseContract(ctx, req.(*QueryGetPowerPurchaseContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PowerPurchaseContractAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPowerPurchaseContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PowerPurchaseContractAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/PowerPurchaseContractAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PowerPurchaseContractAll(ctx, req.(*QueryAllPowerPurchaseContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PpaMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPpaMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PpaMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/PpaMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PpaMap(ctx, req.(*QueryGetPpaMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PpaMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPpaMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PpaMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/PpaMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PpaMapAll(ctx, req.(*QueryAllPpaMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Billingcycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBillingcyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Billingcycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Billingcycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Billingcycles(ctx, req.(*QueryGetBillingcyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BillingcyclesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBillingcyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BillingcyclesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/BillingcyclesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BillingcyclesAll(ctx, req.(*QueryAllBillingcyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentcycleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentcycleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentcycleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/CurrentcycleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentcycleID(ctx, req.(*QueryCurrentcycleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Customerbillingline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCustomerbillinglineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Customerbillingline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Customerbillingline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Customerbillingline(ctx, req.(*QueryGetCustomerbillinglineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustomerbillinglineAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCustomerbillinglineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustomerbillinglineAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/CustomerbillinglineAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustomerbillinglineAll(ctx, req.(*QueryAllCustomerbillinglineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Getcustomerbill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetcustomerbillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Getcustomerbill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Getcustomerbill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Getcustomerbill(ctx, req.(*QueryGetcustomerbillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Customerbills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCustomerbillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Customerbills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Customerbills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Customerbills(ctx, req.(*QueryGetCustomerbillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustomerbillsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCustomerbillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustomerbillsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/CustomerbillsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustomerbillsAll(ctx, req.(*QueryAllCustomerbillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Producerbillingline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProducerbillinglineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Producerbillingline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Producerbillingline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Producerbillingline(ctx, req.(*QueryGetProducerbillinglineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProducerbillinglineAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProducerbillinglineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProducerbillinglineAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/ProducerbillinglineAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProducerbillinglineAll(ctx, req.(*QueryAllProducerbillinglineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Getproducerbill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetproducerbillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Getproducerbill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Getproducerbill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Getproducerbill(ctx, req.(*QueryGetproducerbillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Producerbills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProducerbillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Producerbills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/Producerbills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Producerbills(ctx, req.(*QueryGetProducerbillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProducerbillsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProducerbillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProducerbillsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/electra.meter.Query/ProducerbillsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProducerbillsAll(ctx, req.(*QueryAllProducerbillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "electra.meter.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Meterreadings",
			Handler:    _Query_Meterreadings_Handler,
		},
		{
			MethodName: "MeterreadingsAll",
			Handler:    _Query_MeterreadingsAll_Handler,
		},
		{
			MethodName: "Meterdirectory",
			Handler:    _Query_Meterdirectory_Handler,
		},
		{
			MethodName: "MeterdirectoryAll",
			Handler:    _Query_MeterdirectoryAll_Handler,
		},
		{
			MethodName: "Listrecordings",
			Handler:    _Query_Listrecordings_Handler,
		},
		{
			MethodName: "PowerPurchaseContract",
			Handler:    _Query_PowerPurchaseContract_Handler,
		},
		{
			MethodName: "PowerPurchaseContractAll",
			Handler:    _Query_PowerPurchaseContractAll_Handler,
		},
		{
			MethodName: "PpaMap",
			Handler:    _Query_PpaMap_Handler,
		},
		{
			MethodName: "PpaMapAll",
			Handler:    _Query_PpaMapAll_Handler,
		},
		{
			MethodName: "Billingcycles",
			Handler:    _Query_Billingcycles_Handler,
		},
		{
			MethodName: "BillingcyclesAll",
			Handler:    _Query_BillingcyclesAll_Handler,
		},
		{
			MethodName: "CurrentcycleID",
			Handler:    _Query_CurrentcycleID_Handler,
		},
		{
			MethodName: "Customerbillingline",
			Handler:    _Query_Customerbillingline_Handler,
		},
		{
			MethodName: "CustomerbillinglineAll",
			Handler:    _Query_CustomerbillinglineAll_Handler,
		},
		{
			MethodName: "Getcustomerbill",
			Handler:    _Query_Getcustomerbill_Handler,
		},
		{
			MethodName: "Customerbills",
			Handler:    _Query_Customerbills_Handler,
		},
		{
			MethodName: "CustomerbillsAll",
			Handler:    _Query_CustomerbillsAll_Handler,
		},
		{
			MethodName: "Producerbillingline",
			Handler:    _Query_Producerbillingline_Handler,
		},
		{
			MethodName: "ProducerbillinglineAll",
			Handler:    _Query_ProducerbillinglineAll_Handler,
		},
		{
			MethodName: "Getproducerbill",
			Handler:    _Query_Getproducerbill_Handler,
		},
		{
			MethodName: "Producerbills",
			Handler:    _Query_Producerbills_Handler,
		},
		{
			MethodName: "ProducerbillsAll",
			Handler:    _Query_ProducerbillsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "electra/meter/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMeterreadingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeterreadingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeterreadingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceID) > 0 {
		i -= len(m.DeviceID)
		copy(dAtA[i:], m.DeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeterreadingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeterreadingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeterreadingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Meterreadings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMeterreadingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeterreadingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeterreadingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMeterreadingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeterreadingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeterreadingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Meterreadings) > 0 {
		for iNdEx := len(m.Meterreadings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meterreadings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeterdirectoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeterdirectoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeterdirectoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodeserial) > 0 {
		i -= len(m.Barcodeserial)
		copy(dAtA[i:], m.Barcodeserial)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Barcodeserial)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceID) > 0 {
		i -= len(m.DeviceID)
		copy(dAtA[i:], m.DeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeterdirectoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeterdirectoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeterdirectoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Meterdirectory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMeterdirectoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeterdirectoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeterdirectoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMeterdirectoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeterdirectoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeterdirectoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Meterdirectory) > 0 {
		for iNdEx := len(m.Meterdirectory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meterdirectory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListrecordingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListrecordingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListrecordingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ByUnixTime {
		i--
		if m.ByUnixTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.End != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceID) > 0 {
		i -= len(m.DeviceID)
		copy(dAtA[i:], m.DeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListrecordingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListrecordingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListrecordingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Meterreadings) > 0 {
		for iNdEx := len(m.Meterreadings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Meterreadings[iNdEx])
			copy(dAtA[i:], m.Meterreadings[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Meterreadings[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPowerPurchaseContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPowerPurchaseContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPowerPurchaseContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractDeviceID) > 0 {
		i -= len(m.ContractDeviceID)
		copy(dAtA[i:], m.ContractDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractDeviceID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractID) > 0 {
		i -= len(m.ContractID)
		copy(dAtA[i:], m.ContractID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPowerPurchaseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPowerPurchaseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPowerPurchaseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PowerPurchaseContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPowerPurchaseContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPowerPurchaseContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPowerPurchaseContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPowerPurchaseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPowerPurchaseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPowerPurchaseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PowerPurchaseContract) > 0 {
		for iNdEx := len(m.PowerPurchaseContract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PowerPurchaseContract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPpaMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPpaMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPpaMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractID) > 0 {
		i -= len(m.ContractID)
		copy(dAtA[i:], m.ContractID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractID)))
		i--
		dAtA[i] = 0x22
	}
	if m.AgreementActive {
		i--
		if m.AgreementActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AgreementID) > 0 {
		i -= len(m.AgreementID)
		copy(dAtA[i:], m.AgreementID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AgreementID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerDeviceID) > 0 {
		i -= len(m.ConsumerDeviceID)
		copy(dAtA[i:], m.ConsumerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsumerDeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPpaMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPpaMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPpaMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PpaMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPpaMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPpaMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPpaMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPpaMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPpaMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPpaMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PpaMap) > 0 {
		for iNdEx := len(m.PpaMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PpaMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBillingcyclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBillingcyclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBillingcyclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CycleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBillingcyclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBillingcyclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBillingcyclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Billingcycles.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBillingcyclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBillingcyclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBillingcyclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBillingcyclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBillingcyclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBillingcyclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Billingcycles) > 0 {
		for iNdEx := len(m.Billingcycles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Billingcycles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentcycleIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentcycleIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentcycleIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentcycleIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentcycleIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentcycleIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curency) > 0 {
		i -= len(m.Curency)
		copy(dAtA[i:], m.Curency)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Curency)))
		i--
		dAtA[i] = 0x42
	}
	if m.Moneyout != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Moneyout))
		i--
		dAtA[i] = 0x38
	}
	if m.Moneyin != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Moneyin))
		i--
		dAtA[i] = 0x30
	}
	if m.Whout != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Whout))
		i--
		dAtA[i] = 0x28
	}
	if m.Whin != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Whin))
		i--
		dAtA[i] = 0x20
	}
	if m.End != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Begin != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x10
	}
	if m.CycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CycleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCustomerbillinglineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCustomerbillinglineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCustomerbillinglineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Lineid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Lineid))
		i--
		dAtA[i] = 0x18
	}
	if m.CycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CycleID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CustomerDeviceID) > 0 {
		i -= len(m.CustomerDeviceID)
		copy(dAtA[i:], m.CustomerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CustomerDeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCustomerbillinglineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCustomerbillinglineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCustomerbillinglineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Customerbillingline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCustomerbillinglineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCustomerbillinglineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCustomerbillinglineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCustomerbillinglineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCustomerbillinglineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCustomerbillinglineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Customerbillingline) > 0 {
		for iNdEx := len(m.Customerbillingline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Customerbillingline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetcustomerbillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetcustomerbillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetcustomerbillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BillCycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillCycleID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CustomerDeviceID) > 0 {
		i -= len(m.CustomerDeviceID)
		copy(dAtA[i:], m.CustomerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CustomerDeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetcustomerbillResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetcustomerbillResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetcustomerbillResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x32
	}
	if m.Nblines != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nblines))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if m.BillTotalPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillTotalPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.BillTotalWh != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillTotalWh))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Customerbillinglines) > 0 {
		for iNdEx := len(m.Customerbillinglines) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Customerbillinglines[iNdEx])
			copy(dAtA[i:], m.Customerbillinglines[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Customerbillinglines[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCustomerbillsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCustomerbillsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCustomerbillsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomerDeviceID) > 0 {
		i -= len(m.CustomerDeviceID)
		copy(dAtA[i:], m.CustomerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CustomerDeviceID)))
		i--
		dAtA[i] = 0x12
	}
	if m.BillCycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillCycleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCustomerbillsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCustomerbillsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCustomerbillsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Customerbills.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCustomerbillsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCustomerbillsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCustomerbillsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCustomerbillsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCustomerbillsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCustomerbillsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Customerbills) > 0 {
		for iNdEx := len(m.Customerbills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Customerbills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerbillinglineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerbillinglineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerbillinglineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Lineid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Lineid))
		i--
		dAtA[i] = 0x18
	}
	if m.CycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CycleID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProducerDeviceID) > 0 {
		i -= len(m.ProducerDeviceID)
		copy(dAtA[i:], m.ProducerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProducerDeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerbillinglineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerbillinglineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerbillinglineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Producerbillingline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerbillinglineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerbillinglineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerbillinglineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerbillinglineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerbillinglineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerbillinglineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producerbillingline) > 0 {
		for iNdEx := len(m.Producerbillingline) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Producerbillingline[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetproducerbillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetproducerbillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetproducerbillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BillCycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillCycleID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProducerDeviceID) > 0 {
		i -= len(m.ProducerDeviceID)
		copy(dAtA[i:], m.ProducerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProducerDeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetproducerbillResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetproducerbillResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetproducerbillResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x32
	}
	if m.Nblines != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nblines))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Curency) > 0 {
		i -= len(m.Curency)
		copy(dAtA[i:], m.Curency)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Curency)))
		i--
		dAtA[i] = 0x22
	}
	if m.BillTotalPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillTotalPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.BillTotalWh != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillTotalWh))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Producerbillinglines) > 0 {
		for iNdEx := len(m.Producerbillinglines) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Producerbillinglines[iNdEx])
			copy(dAtA[i:], m.Producerbillinglines[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Producerbillinglines[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerbillsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerbillsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerbillsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProducerDeviceID) > 0 {
		i -= len(m.ProducerDeviceID)
		copy(dAtA[i:], m.ProducerDeviceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProducerDeviceID)))
		i--
		dAtA[i] = 0x12
	}
	if m.BillCycleID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BillCycleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerbillsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerbillsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerbillsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Producerbills.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerbillsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerbillsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerbillsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerbillsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerbillsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerbillsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producerbills) > 0 {
		for iNdEx := len(m.Producerbills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Producerbills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMeterreadingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetMeterreadingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meterreadings.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMeterreadingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMeterreadingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meterreadings) > 0 {
		for _, e := range m.Meterreadings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMeterdirectoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Barcodeserial)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMeterdirectoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meterdirectory.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMeterdirectoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMeterdirectoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meterdirectory) > 0 {
		for _, e := range m.Meterdirectory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListrecordingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovQuery(uint64(m.End))
	}
	if m.ByUnixTime {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListrecordingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meterreadings) > 0 {
		for _, s := range m.Meterreadings {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPowerPurchaseContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPowerPurchaseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PowerPurchaseContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPowerPurchaseContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPowerPurchaseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PowerPurchaseContract) > 0 {
		for _, e := range m.PowerPurchaseContract {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPpaMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AgreementID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AgreementActive {
		n += 2
	}
	l = len(m.ContractID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPpaMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PpaMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPpaMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPpaMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PpaMap) > 0 {
		for _, e := range m.PpaMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBillingcyclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CycleID != 0 {
		n += 1 + sovQuery(uint64(m.CycleID))
	}
	return n
}

func (m *QueryGetBillingcyclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Billingcycles.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBillingcyclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBillingcyclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Billingcycles) > 0 {
		for _, e := range m.Billingcycles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentcycleIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentcycleIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CycleID != 0 {
		n += 1 + sovQuery(uint64(m.CycleID))
	}
	if m.Begin != 0 {
		n += 1 + sovQuery(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovQuery(uint64(m.End))
	}
	if m.Whin != 0 {
		n += 1 + sovQuery(uint64(m.Whin))
	}
	if m.Whout != 0 {
		n += 1 + sovQuery(uint64(m.Whout))
	}
	if m.Moneyin != 0 {
		n += 1 + sovQuery(uint64(m.Moneyin))
	}
	if m.Moneyout != 0 {
		n += 1 + sovQuery(uint64(m.Moneyout))
	}
	l = len(m.Curency)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCustomerbillinglineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CycleID != 0 {
		n += 1 + sovQuery(uint64(m.CycleID))
	}
	if m.Lineid != 0 {
		n += 1 + sovQuery(uint64(m.Lineid))
	}
	if m.Paid {
		n += 2
	}
	return n
}

func (m *QueryGetCustomerbillinglineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Customerbillingline.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCustomerbillinglineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCustomerbillinglineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Customerbillingline) > 0 {
		for _, e := range m.Customerbillingline {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetcustomerbillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BillCycleID != 0 {
		n += 1 + sovQuery(uint64(m.BillCycleID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetcustomerbillResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Customerbillinglines) > 0 {
		for _, s := range m.Customerbillinglines {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BillTotalWh != 0 {
		n += 1 + sovQuery(uint64(m.BillTotalWh))
	}
	if m.BillTotalPrice != 0 {
		n += 1 + sovQuery(uint64(m.BillTotalPrice))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nblines != 0 {
		n += 1 + sovQuery(uint64(m.Nblines))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCustomerbillsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BillCycleID != 0 {
		n += 1 + sovQuery(uint64(m.BillCycleID))
	}
	l = len(m.CustomerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCustomerbillsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Customerbills.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCustomerbillsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCustomerbillsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Customerbills) > 0 {
		for _, e := range m.Customerbills {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProducerbillinglineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProducerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CycleID != 0 {
		n += 1 + sovQuery(uint64(m.CycleID))
	}
	if m.Lineid != 0 {
		n += 1 + sovQuery(uint64(m.Lineid))
	}
	if m.Paid {
		n += 2
	}
	return n
}

func (m *QueryGetProducerbillinglineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Producerbillingline.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProducerbillinglineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProducerbillinglineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Producerbillingline) > 0 {
		for _, e := range m.Producerbillingline {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetproducerbillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProducerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BillCycleID != 0 {
		n += 1 + sovQuery(uint64(m.BillCycleID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetproducerbillResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Producerbillinglines) > 0 {
		for _, s := range m.Producerbillinglines {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BillTotalWh != 0 {
		n += 1 + sovQuery(uint64(m.BillTotalWh))
	}
	if m.BillTotalPrice != 0 {
		n += 1 + sovQuery(uint64(m.BillTotalPrice))
	}
	l = len(m.Curency)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nblines != 0 {
		n += 1 + sovQuery(uint64(m.Nblines))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProducerbillsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BillCycleID != 0 {
		n += 1 + sovQuery(uint64(m.BillCycleID))
	}
	l = len(m.ProducerDeviceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProducerbillsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Producerbills.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProducerbillsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProducerbillsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Producerbills) > 0 {
		for _, e := range m.Producerbills {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeterreadingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeterreadingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeterreadingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeterreadingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeterreadingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeterreadingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meterreadings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meterreadings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeterreadingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeterreadingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeterreadingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeterreadingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeterreadingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeterreadingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meterreadings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meterreadings = append(m.Meterreadings, Meterreadings{})
			if err := m.Meterreadings[len(m.Meterreadings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeterdirectoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeterdirectoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeterdirectoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodeserial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodeserial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeterdirectoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeterdirectoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeterdirectoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meterdirectory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meterdirectory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeterdirectoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeterdirectoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeterdirectoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeterdirectoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeterdirectoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeterdirectoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meterdirectory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meterdirectory = append(m.Meterdirectory, Meterdirectory{})
			if err := m.Meterdirectory[len(m.Meterdirectory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListrecordingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListrecordingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListrecordingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByUnixTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByUnixTime = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListrecordingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListrecordingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListrecordingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meterreadings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meterreadings = append(m.Meterreadings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPowerPurchaseContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPowerPurchaseContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPowerPurchaseContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPowerPurchaseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPowerPurchaseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPowerPurchaseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPurchaseContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerPurchaseContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPowerPurchaseContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPowerPurchaseContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPowerPurchaseContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPowerPurchaseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPowerPurchaseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPowerPurchaseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPurchaseContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPurchaseContract = append(m.PowerPurchaseContract, PowerPurchaseContract{})
			if err := m.PowerPurchaseContract[len(m.PowerPurchaseContract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPpaMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPpaMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPpaMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreementID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgreementID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreementActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgreementActive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPpaMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPpaMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPpaMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PpaMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PpaMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPpaMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPpaMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPpaMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPpaMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPpaMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPpaMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PpaMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PpaMap = append(m.PpaMap, PpaMap{})
			if err := m.PpaMap[len(m.PpaMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBillingcyclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBillingcyclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBillingcyclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleID", wireType)
			}
			m.CycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBillingcyclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBillingcyclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBillingcyclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billingcycles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Billingcycles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBillingcyclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBillingcyclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBillingcyclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBillingcyclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBillingcyclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBillingcyclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billingcycles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Billingcycles = append(m.Billingcycles, Billingcycles{})
			if err := m.Billingcycles[len(m.Billingcycles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentcycleIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentcycleIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentcycleIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentcycleIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentcycleIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentcycleIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleID", wireType)
			}
			m.CycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whin", wireType)
			}
			m.Whin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whout", wireType)
			}
			m.Whout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moneyin", wireType)
			}
			m.Moneyin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Moneyin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moneyout", wireType)
			}
			m.Moneyout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Moneyout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCustomerbillinglineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCustomerbillinglineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCustomerbillinglineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleID", wireType)
			}
			m.CycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lineid", wireType)
			}
			m.Lineid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lineid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCustomerbillinglineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCustomerbillinglineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCustomerbillinglineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customerbillingline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Customerbillingline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCustomerbillinglineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCustomerbillinglineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCustomerbillinglineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCustomerbillinglineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCustomerbillinglineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCustomerbillinglineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customerbillingline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customerbillingline = append(m.Customerbillingline, Customerbillingline{})
			if err := m.Customerbillingline[len(m.Customerbillingline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetcustomerbillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetcustomerbillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetcustomerbillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillCycleID", wireType)
			}
			m.BillCycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillCycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetcustomerbillResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetcustomerbillResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetcustomerbillResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customerbillinglines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customerbillinglines = append(m.Customerbillinglines, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalWh", wireType)
			}
			m.BillTotalWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillTotalWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalPrice", wireType)
			}
			m.BillTotalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillTotalPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nblines", wireType)
			}
			m.Nblines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nblines |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCustomerbillsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCustomerbillsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCustomerbillsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillCycleID", wireType)
			}
			m.BillCycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillCycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCustomerbillsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCustomerbillsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCustomerbillsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customerbills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Customerbills.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCustomerbillsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCustomerbillsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCustomerbillsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCustomerbillsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCustomerbillsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCustomerbillsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customerbills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customerbills = append(m.Customerbills, Customerbills{})
			if err := m.Customerbills[len(m.Customerbills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerbillinglineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerbillinglineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerbillinglineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleID", wireType)
			}
			m.CycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lineid", wireType)
			}
			m.Lineid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lineid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerbillinglineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerbillinglineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerbillinglineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producerbillingline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Producerbillingline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerbillinglineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerbillinglineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerbillinglineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerbillinglineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerbillinglineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerbillinglineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producerbillingline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producerbillingline = append(m.Producerbillingline, Producerbillingline{})
			if err := m.Producerbillingline[len(m.Producerbillingline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetproducerbillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetproducerbillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetproducerbillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillCycleID", wireType)
			}
			m.BillCycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillCycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetproducerbillResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetproducerbillResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetproducerbillResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producerbillinglines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producerbillinglines = append(m.Producerbillinglines, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalWh", wireType)
			}
			m.BillTotalWh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillTotalWh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillTotalPrice", wireType)
			}
			m.BillTotalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillTotalPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nblines", wireType)
			}
			m.Nblines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nblines |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerbillsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerbillsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerbillsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillCycleID", wireType)
			}
			m.BillCycleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillCycleID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerbillsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerbillsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerbillsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producerbills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Producerbills.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerbillsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerbillsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerbillsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerbillsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerbillsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerbillsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producerbills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producerbills = append(m.Producerbills, Producerbills{})
			if err := m.Producerbills[len(m.Producerbills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
