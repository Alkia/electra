"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var params_1 = __importDefault(require("./params"));
var js_crypto_hash_1 = __importDefault(require("js-crypto-hash"));
// Deriving KEK
// https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf
// https://tools.ietf.org/html/rfc7518
/**
 * NIST Concatenation KDF fo JOSE
 * @param sharedSecret {Uint8Array} - ECDH Output
 * @param otherInfoBytes {Uint8Array} - other info
 * @param keyDataLen {number} - output key length in bytes
 * @param hash {string} - the default is 'SHA-256'
 * @return {Promise<Uint8Array>}
 */
exports.nistConcatKdf = function (sharedSecret, otherInfoBytes, keyDataLen, hash) {
    if (keyDataLen === void 0) { keyDataLen = 32; }
    if (hash === void 0) { hash = 'SHA-256'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var reps, output, counter, i, msg, ki;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    reps = Math.ceil(keyDataLen / params_1.default.hashes[hash].hashSize);
                    if (reps > (Math.pow(2, 32) - 1))
                        throw new Error('TooLongKeyDataIndicated');
                    output = new Uint8Array(params_1.default.hashes[hash].hashSize * reps);
                    counter = new Uint8Array(4);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < reps)) return [3 /*break*/, 4];
                    counter = increment(counter);
                    msg = new Uint8Array(4 + sharedSecret.length + otherInfoBytes.length);
                    msg.set(counter);
                    msg.set(sharedSecret, counter.length);
                    msg.set(otherInfoBytes, counter.length + sharedSecret.length);
                    return [4 /*yield*/, js_crypto_hash_1.default.compute(msg, hash)];
                case 2:
                    ki = _a.sent();
                    output.set(ki, i * params_1.default.hashes[hash].hashSize);
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, output.slice(0, keyDataLen)];
            }
        });
    });
};
var increment = function (counter) {
    counter[3] += 1;
    var up = true;
    var i = 3;
    while (up && i > 0) {
        counter[i - 1] += (up && counter[i] === 0) ? 1 : 0;
        up = (up && counter[i] === 0);
        i--;
    }
    return counter;
};
//# sourceMappingURL=nist-concat-kdf.js.map