"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const types_1 = require("./types");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.group.v1";
function createBaseGenesisState() {
    return {
        groupSeq: helpers_1.Long.UZERO,
        groups: [],
        groupMembers: [],
        groupPolicySeq: helpers_1.Long.UZERO,
        groupPolicies: [],
        proposalSeq: helpers_1.Long.UZERO,
        proposals: [],
        votes: [],
    };
}
exports.GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.groupSeq.isZero()) {
            writer.uint32(8).uint64(message.groupSeq);
        }
        for (const v of message.groups) {
            types_1.GroupInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.groupMembers) {
            types_1.GroupMember.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (!message.groupPolicySeq.isZero()) {
            writer.uint32(32).uint64(message.groupPolicySeq);
        }
        for (const v of message.groupPolicies) {
            types_1.GroupPolicyInfo.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (!message.proposalSeq.isZero()) {
            writer.uint32(48).uint64(message.proposalSeq);
        }
        for (const v of message.proposals) {
            types_1.Proposal.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.votes) {
            types_1.Vote.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupSeq = reader.uint64();
                    break;
                case 2:
                    message.groups.push(types_1.GroupInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.groupMembers.push(types_1.GroupMember.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.groupPolicySeq = reader.uint64();
                    break;
                case 5:
                    message.groupPolicies.push(types_1.GroupPolicyInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.proposalSeq = reader.uint64();
                    break;
                case 7:
                    message.proposals.push(types_1.Proposal.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.votes.push(types_1.Vote.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupSeq: (0, helpers_1.isSet)(object.groupSeq) ? helpers_1.Long.fromValue(object.groupSeq) : helpers_1.Long.UZERO,
            groups: Array.isArray(object?.groups) ? object.groups.map((e) => types_1.GroupInfo.fromJSON(e)) : [],
            groupMembers: Array.isArray(object?.groupMembers)
                ? object.groupMembers.map((e) => types_1.GroupMember.fromJSON(e))
                : [],
            groupPolicySeq: (0, helpers_1.isSet)(object.groupPolicySeq) ? helpers_1.Long.fromValue(object.groupPolicySeq) : helpers_1.Long.UZERO,
            groupPolicies: Array.isArray(object?.groupPolicies)
                ? object.groupPolicies.map((e) => types_1.GroupPolicyInfo.fromJSON(e))
                : [],
            proposalSeq: (0, helpers_1.isSet)(object.proposalSeq) ? helpers_1.Long.fromValue(object.proposalSeq) : helpers_1.Long.UZERO,
            proposals: Array.isArray(object?.proposals)
                ? object.proposals.map((e) => types_1.Proposal.fromJSON(e))
                : [],
            votes: Array.isArray(object?.votes) ? object.votes.map((e) => types_1.Vote.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupSeq !== undefined && (obj.groupSeq = (message.groupSeq || helpers_1.Long.UZERO).toString());
        if (message.groups) {
            obj.groups = message.groups.map((e) => (e ? types_1.GroupInfo.toJSON(e) : undefined));
        }
        else {
            obj.groups = [];
        }
        if (message.groupMembers) {
            obj.groupMembers = message.groupMembers.map((e) => (e ? types_1.GroupMember.toJSON(e) : undefined));
        }
        else {
            obj.groupMembers = [];
        }
        message.groupPolicySeq !== undefined &&
            (obj.groupPolicySeq = (message.groupPolicySeq || helpers_1.Long.UZERO).toString());
        if (message.groupPolicies) {
            obj.groupPolicies = message.groupPolicies.map((e) => (e ? types_1.GroupPolicyInfo.toJSON(e) : undefined));
        }
        else {
            obj.groupPolicies = [];
        }
        message.proposalSeq !== undefined && (obj.proposalSeq = (message.proposalSeq || helpers_1.Long.UZERO).toString());
        if (message.proposals) {
            obj.proposals = message.proposals.map((e) => (e ? types_1.Proposal.toJSON(e) : undefined));
        }
        else {
            obj.proposals = [];
        }
        if (message.votes) {
            obj.votes = message.votes.map((e) => (e ? types_1.Vote.toJSON(e) : undefined));
        }
        else {
            obj.votes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.groupSeq =
            object.groupSeq !== undefined && object.groupSeq !== null
                ? helpers_1.Long.fromValue(object.groupSeq)
                : helpers_1.Long.UZERO;
        message.groups = object.groups?.map((e) => types_1.GroupInfo.fromPartial(e)) || [];
        message.groupMembers = object.groupMembers?.map((e) => types_1.GroupMember.fromPartial(e)) || [];
        message.groupPolicySeq =
            object.groupPolicySeq !== undefined && object.groupPolicySeq !== null
                ? helpers_1.Long.fromValue(object.groupPolicySeq)
                : helpers_1.Long.UZERO;
        message.groupPolicies = object.groupPolicies?.map((e) => types_1.GroupPolicyInfo.fromPartial(e)) || [];
        message.proposalSeq =
            object.proposalSeq !== undefined && object.proposalSeq !== null
                ? helpers_1.Long.fromValue(object.proposalSeq)
                : helpers_1.Long.UZERO;
        message.proposals = object.proposals?.map((e) => types_1.Proposal.fromPartial(e)) || [];
        message.votes = object.votes?.map((e) => types_1.Vote.fromPartial(e)) || [];
        return message;
    },
};
//# sourceMappingURL=genesis.js.map