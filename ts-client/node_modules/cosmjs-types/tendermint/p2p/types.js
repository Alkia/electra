"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultNodeInfoOther = exports.DefaultNodeInfo = exports.ProtocolVersion = exports.NetAddress = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "tendermint.p2p";
const baseNetAddress = { id: "", ip: "", port: 0 };
exports.NetAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.ip !== "") {
            writer.uint32(18).string(message.ip);
        }
        if (message.port !== 0) {
            writer.uint32(24).uint32(message.port);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseNetAddress);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.ip = reader.string();
                    break;
                case 3:
                    message.port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseNetAddress);
        message.id = object.id !== undefined && object.id !== null ? String(object.id) : "";
        message.ip = object.ip !== undefined && object.ip !== null ? String(object.ip) : "";
        message.port = object.port !== undefined && object.port !== null ? Number(object.port) : 0;
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.ip !== undefined && (obj.ip = message.ip);
        message.port !== undefined && (obj.port = message.port);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = Object.assign({}, baseNetAddress);
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.ip = (_b = object.ip) !== null && _b !== void 0 ? _b : "";
        message.port = (_c = object.port) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
const baseProtocolVersion = { p2p: long_1.default.UZERO, block: long_1.default.UZERO, app: long_1.default.UZERO };
exports.ProtocolVersion = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.p2p.isZero()) {
            writer.uint32(8).uint64(message.p2p);
        }
        if (!message.block.isZero()) {
            writer.uint32(16).uint64(message.block);
        }
        if (!message.app.isZero()) {
            writer.uint32(24).uint64(message.app);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseProtocolVersion);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.p2p = reader.uint64();
                    break;
                case 2:
                    message.block = reader.uint64();
                    break;
                case 3:
                    message.app = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseProtocolVersion);
        message.p2p = object.p2p !== undefined && object.p2p !== null ? long_1.default.fromString(object.p2p) : long_1.default.UZERO;
        message.block =
            object.block !== undefined && object.block !== null ? long_1.default.fromString(object.block) : long_1.default.UZERO;
        message.app = object.app !== undefined && object.app !== null ? long_1.default.fromString(object.app) : long_1.default.UZERO;
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.p2p !== undefined && (obj.p2p = (message.p2p || long_1.default.UZERO).toString());
        message.block !== undefined && (obj.block = (message.block || long_1.default.UZERO).toString());
        message.app !== undefined && (obj.app = (message.app || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseProtocolVersion);
        message.p2p = object.p2p !== undefined && object.p2p !== null ? long_1.default.fromValue(object.p2p) : long_1.default.UZERO;
        message.block =
            object.block !== undefined && object.block !== null ? long_1.default.fromValue(object.block) : long_1.default.UZERO;
        message.app = object.app !== undefined && object.app !== null ? long_1.default.fromValue(object.app) : long_1.default.UZERO;
        return message;
    },
};
const baseDefaultNodeInfo = {
    defaultNodeId: "",
    listenAddr: "",
    network: "",
    version: "",
    moniker: "",
};
exports.DefaultNodeInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.protocolVersion !== undefined) {
            exports.ProtocolVersion.encode(message.protocolVersion, writer.uint32(10).fork()).ldelim();
        }
        if (message.defaultNodeId !== "") {
            writer.uint32(18).string(message.defaultNodeId);
        }
        if (message.listenAddr !== "") {
            writer.uint32(26).string(message.listenAddr);
        }
        if (message.network !== "") {
            writer.uint32(34).string(message.network);
        }
        if (message.version !== "") {
            writer.uint32(42).string(message.version);
        }
        if (message.channels.length !== 0) {
            writer.uint32(50).bytes(message.channels);
        }
        if (message.moniker !== "") {
            writer.uint32(58).string(message.moniker);
        }
        if (message.other !== undefined) {
            exports.DefaultNodeInfoOther.encode(message.other, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDefaultNodeInfo);
        message.channels = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.protocolVersion = exports.ProtocolVersion.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.defaultNodeId = reader.string();
                    break;
                case 3:
                    message.listenAddr = reader.string();
                    break;
                case 4:
                    message.network = reader.string();
                    break;
                case 5:
                    message.version = reader.string();
                    break;
                case 6:
                    message.channels = reader.bytes();
                    break;
                case 7:
                    message.moniker = reader.string();
                    break;
                case 8:
                    message.other = exports.DefaultNodeInfoOther.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDefaultNodeInfo);
        message.protocolVersion =
            object.protocolVersion !== undefined && object.protocolVersion !== null
                ? exports.ProtocolVersion.fromJSON(object.protocolVersion)
                : undefined;
        message.defaultNodeId =
            object.defaultNodeId !== undefined && object.defaultNodeId !== null ? String(object.defaultNodeId) : "";
        message.listenAddr =
            object.listenAddr !== undefined && object.listenAddr !== null ? String(object.listenAddr) : "";
        message.network = object.network !== undefined && object.network !== null ? String(object.network) : "";
        message.version = object.version !== undefined && object.version !== null ? String(object.version) : "";
        message.channels =
            object.channels !== undefined && object.channels !== null
                ? bytesFromBase64(object.channels)
                : new Uint8Array();
        message.moniker = object.moniker !== undefined && object.moniker !== null ? String(object.moniker) : "";
        message.other =
            object.other !== undefined && object.other !== null
                ? exports.DefaultNodeInfoOther.fromJSON(object.other)
                : undefined;
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.protocolVersion !== undefined &&
            (obj.protocolVersion = message.protocolVersion
                ? exports.ProtocolVersion.toJSON(message.protocolVersion)
                : undefined);
        message.defaultNodeId !== undefined && (obj.defaultNodeId = message.defaultNodeId);
        message.listenAddr !== undefined && (obj.listenAddr = message.listenAddr);
        message.network !== undefined && (obj.network = message.network);
        message.version !== undefined && (obj.version = message.version);
        message.channels !== undefined &&
            (obj.channels = base64FromBytes(message.channels !== undefined ? message.channels : new Uint8Array()));
        message.moniker !== undefined && (obj.moniker = message.moniker);
        message.other !== undefined &&
            (obj.other = message.other ? exports.DefaultNodeInfoOther.toJSON(message.other) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = Object.assign({}, baseDefaultNodeInfo);
        message.protocolVersion =
            object.protocolVersion !== undefined && object.protocolVersion !== null
                ? exports.ProtocolVersion.fromPartial(object.protocolVersion)
                : undefined;
        message.defaultNodeId = (_a = object.defaultNodeId) !== null && _a !== void 0 ? _a : "";
        message.listenAddr = (_b = object.listenAddr) !== null && _b !== void 0 ? _b : "";
        message.network = (_c = object.network) !== null && _c !== void 0 ? _c : "";
        message.version = (_d = object.version) !== null && _d !== void 0 ? _d : "";
        message.channels = (_e = object.channels) !== null && _e !== void 0 ? _e : new Uint8Array();
        message.moniker = (_f = object.moniker) !== null && _f !== void 0 ? _f : "";
        message.other =
            object.other !== undefined && object.other !== null
                ? exports.DefaultNodeInfoOther.fromPartial(object.other)
                : undefined;
        return message;
    },
};
const baseDefaultNodeInfoOther = { txIndex: "", rpcAddress: "" };
exports.DefaultNodeInfoOther = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.txIndex !== "") {
            writer.uint32(10).string(message.txIndex);
        }
        if (message.rpcAddress !== "") {
            writer.uint32(18).string(message.rpcAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDefaultNodeInfoOther);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txIndex = reader.string();
                    break;
                case 2:
                    message.rpcAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDefaultNodeInfoOther);
        message.txIndex = object.txIndex !== undefined && object.txIndex !== null ? String(object.txIndex) : "";
        message.rpcAddress =
            object.rpcAddress !== undefined && object.rpcAddress !== null ? String(object.rpcAddress) : "";
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.txIndex !== undefined && (obj.txIndex = message.txIndex);
        message.rpcAddress !== undefined && (obj.rpcAddress = message.rpcAddress);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = Object.assign({}, baseDefaultNodeInfoOther);
        message.txIndex = (_a = object.txIndex) !== null && _a !== void 0 ? _a : "";
        message.rpcAddress = (_b = object.rpcAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=types.js.map