"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsonrpc_1 = require("../jsonrpc");
const testutil_spec_1 = require("../testutil.spec");
const httpclient_1 = require("./httpclient");
const rpcclient_1 = require("./rpcclient");
const websocketclient_1 = require("./websocketclient");
function pendingWithoutTendermint() {
    if (!process.env.TENDERMINT_ENABLED) {
        pending("Set TENDERMINT_ENABLED to enable tendermint rpc tests");
    }
}
describe("RpcClient", () => {
    const tendermintUrl = testutil_spec_1.defaultInstance.url;
    it("has working instanceOfRpcStreamingClient()", async () => {
        pendingWithoutTendermint();
        const httpClient = new httpclient_1.HttpClient(tendermintUrl);
        const wsClient = new websocketclient_1.WebsocketClient(tendermintUrl);
        expect((0, rpcclient_1.instanceOfRpcStreamingClient)(httpClient)).toEqual(false);
        expect((0, rpcclient_1.instanceOfRpcStreamingClient)(wsClient)).toEqual(true);
        httpClient.disconnect();
        await wsClient.connected();
        wsClient.disconnect();
    });
    it("should also work with trailing slashes", async () => {
        pendingWithoutTendermint();
        const statusRequest = (0, jsonrpc_1.createJsonRpcRequest)("status");
        const httpClient = new httpclient_1.HttpClient(tendermintUrl + "/");
        expect(await httpClient.execute(statusRequest)).toBeDefined();
        httpClient.disconnect();
        const wsClient = new websocketclient_1.WebsocketClient(tendermintUrl + "/");
        expect(await wsClient.execute(statusRequest)).toBeDefined();
        wsClient.disconnect();
    });
});
//# sourceMappingURL=rpcclient.spec.js.map