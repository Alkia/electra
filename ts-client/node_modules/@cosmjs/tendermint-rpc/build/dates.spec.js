"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const readonly_date_1 = require("readonly-date");
const dates_1 = require("./dates");
describe("dates", () => {
    describe("fromRfc3339WithNanoseconds", () => {
        it("works", () => {
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26Z").nanoseconds).toEqual(0);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7Z").nanoseconds).toEqual(0);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77Z").nanoseconds).toEqual(0);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778Z").nanoseconds).toEqual(0);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7789Z").nanoseconds).toEqual(900000);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77809Z").nanoseconds).toEqual(90000);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778009Z").nanoseconds).toEqual(9000);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7780009Z").nanoseconds).toEqual(900);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77800009Z").nanoseconds).toEqual(90);
            expect((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778000009Z").nanoseconds).toEqual(9);
        });
    });
    describe("toRfc3339WithNanoseconds", () => {
        it("works", () => {
            const date1 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date1.nanoseconds = 0;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date1)).toEqual("2020-12-15T10:57:26.778000000Z");
            const date2 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date2.nanoseconds = 900000;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date2)).toEqual("2020-12-15T10:57:26.778900000Z");
            const date3 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date3.nanoseconds = 90000;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date3)).toEqual("2020-12-15T10:57:26.778090000Z");
            const date4 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date4.nanoseconds = 9000;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date4)).toEqual("2020-12-15T10:57:26.778009000Z");
            const date5 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date5.nanoseconds = 900;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date5)).toEqual("2020-12-15T10:57:26.778000900Z");
            const date6 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date6.nanoseconds = 90;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date6)).toEqual("2020-12-15T10:57:26.778000090Z");
            const date7 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date7.nanoseconds = 9;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date7)).toEqual("2020-12-15T10:57:26.778000009Z");
        });
        it("works for DateWithNanoseconds", () => {
            const date1 = new Date("2020-12-15T10:57:26.778Z");
            date1.nanoseconds = 1;
            expect((0, dates_1.toRfc3339WithNanoseconds)(date1)).toEqual("2020-12-15T10:57:26.778000001Z");
        });
        it("works for Date", () => {
            const date1 = new Date("2020-12-15T10:57:26.778Z");
            expect((0, dates_1.toRfc3339WithNanoseconds)(date1)).toEqual("2020-12-15T10:57:26.778000000Z");
        });
    });
    describe("fromSeconds", () => {
        it("works", () => {
            {
                const date = (0, dates_1.fromSeconds)(1608029846);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 0);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 1);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000000001Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 10);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000000010Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 100);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000000100Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 1000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000001000Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 10000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000010000Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 100000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.000100000Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 1000000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.001000000Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 10000000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.010000000Z"));
            }
            {
                const date = (0, dates_1.fromSeconds)(1608029846, 100000000);
                expect(date).toEqual((0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.100000000Z"));
            }
        });
        it("throws for nanos out of range", () => {
            expect(() => (0, dates_1.fromSeconds)(1608029846, 1000000000)).toThrow();
            expect(() => (0, dates_1.fromSeconds)(1608029846, -1)).toThrow();
            expect(() => (0, dates_1.fromSeconds)(1608029846, 1.2)).toThrow();
            expect(() => (0, dates_1.fromSeconds)(1608029846, NaN)).toThrow();
        });
    });
    describe("toSeconds", () => {
        it("works", () => {
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 0 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 700000000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 770000000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778000000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7789Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778900000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77809Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778090000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778009Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778009000 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.7780009Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778000900 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.77800009Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778000090 });
            }
            {
                const date = (0, dates_1.fromRfc3339WithNanoseconds)("2020-12-15T10:57:26.778000009Z");
                expect((0, dates_1.toSeconds)(date)).toEqual({ seconds: 1608029846, nanos: 778000009 });
            }
        });
    });
    describe("DateTime", () => {
        it("decodes a string", () => {
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.778Z").nanoseconds).toEqual(0);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.7789Z").nanoseconds).toEqual(900000);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.77809Z").nanoseconds).toEqual(90000);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.778009Z").nanoseconds).toEqual(9000);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.7780009Z").nanoseconds).toEqual(900);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.77800009Z").nanoseconds).toEqual(90);
            expect(dates_1.DateTime.decode("2020-12-15T10:57:26.778000009Z").nanoseconds).toEqual(9);
        });
        it("encodes a string", () => {
            const date1 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date1.nanoseconds = 0;
            expect(dates_1.DateTime.encode(date1)).toEqual("2020-12-15T10:57:26.778000000Z");
            const date2 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date2.nanoseconds = 900000;
            expect(dates_1.DateTime.encode(date2)).toEqual("2020-12-15T10:57:26.778900000Z");
            const date3 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date3.nanoseconds = 90000;
            expect(dates_1.DateTime.encode(date3)).toEqual("2020-12-15T10:57:26.778090000Z");
            const date4 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date4.nanoseconds = 9000;
            expect(dates_1.DateTime.encode(date4)).toEqual("2020-12-15T10:57:26.778009000Z");
            const date5 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date5.nanoseconds = 900;
            expect(dates_1.DateTime.encode(date5)).toEqual("2020-12-15T10:57:26.778000900Z");
            const date6 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date6.nanoseconds = 90;
            expect(dates_1.DateTime.encode(date6)).toEqual("2020-12-15T10:57:26.778000090Z");
            const date7 = new readonly_date_1.ReadonlyDate("2020-12-15T10:57:26.778Z");
            date7.nanoseconds = 9;
            expect(dates_1.DateTime.encode(date7)).toEqual("2020-12-15T10:57:26.778000009Z");
        });
    });
});
//# sourceMappingURL=dates.spec.js.map