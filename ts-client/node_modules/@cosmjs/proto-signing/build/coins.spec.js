"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coins_1 = require("./coins");
describe("coins", () => {
    describe("parseCoins", () => {
        it("works for empty", () => {
            expect((0, coins_1.parseCoins)("")).toEqual([]);
        });
        it("works for one element", () => {
            expect((0, coins_1.parseCoins)("7643ureef")).toEqual([
                {
                    amount: "7643",
                    denom: "ureef",
                },
            ]);
        });
        it("works for various denoms", () => {
            // very short (3)
            expect((0, coins_1.parseCoins)("7643bar")).toEqual([
                {
                    amount: "7643",
                    denom: "bar",
                },
            ]);
            // very long (128)
            expect((0, coins_1.parseCoins)("7643abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh")).toEqual([
                {
                    amount: "7643",
                    denom: "abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh",
                },
            ]);
            // IBC denom (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin_test.go#L512-L519)
            expect((0, coins_1.parseCoins)("7643ibc/7F1D3FCF4AE79E1554D670D1AD949A9BA4E4A3C76C63093E17E446A46061A7A2")).toEqual([
                {
                    amount: "7643",
                    denom: "ibc/7F1D3FCF4AE79E1554D670D1AD949A9BA4E4A3C76C63093E17E446A46061A7A2",
                },
            ]);
        });
        it("works for two", () => {
            expect((0, coins_1.parseCoins)("819966000ucosm,700000000ustake")).toEqual([
                {
                    amount: "819966000",
                    denom: "ucosm",
                },
                {
                    amount: "700000000",
                    denom: "ustake",
                },
            ]);
        });
        it("ignores empty elements", () => {
            // start
            expect((0, coins_1.parseCoins)(",819966000ucosm,700000000ustake")).toEqual([
                {
                    amount: "819966000",
                    denom: "ucosm",
                },
                {
                    amount: "700000000",
                    denom: "ustake",
                },
            ]);
            // middle
            expect((0, coins_1.parseCoins)("819966000ucosm,,700000000ustake")).toEqual([
                {
                    amount: "819966000",
                    denom: "ucosm",
                },
                {
                    amount: "700000000",
                    denom: "ustake",
                },
            ]);
            // end
            expect((0, coins_1.parseCoins)("819966000ucosm,700000000ustake,")).toEqual([
                {
                    amount: "819966000",
                    denom: "ucosm",
                },
                {
                    amount: "700000000",
                    denom: "ustake",
                },
            ]);
        });
        it("throws for invalid inputs", () => {
            // denom missing
            expect(() => (0, coins_1.parseCoins)("3456")).toThrowError(/invalid coin string/i);
            // amount missing
            expect(() => (0, coins_1.parseCoins)("ucosm")).toThrowError(/invalid coin string/i);
            // denom starting with slash
            expect(() => (0, coins_1.parseCoins)("3456/ibc")).toThrowError(/invalid coin string/i);
            // denom too short
            expect(() => (0, coins_1.parseCoins)("3456a")).toThrowError(/invalid coin string/i);
            expect(() => (0, coins_1.parseCoins)("3456aa")).toThrowError(/invalid coin string/i);
            // denom too long
            expect(() => (0, coins_1.parseCoins)("3456abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgha")).toThrowError(/invalid coin string/i);
        });
    });
});
//# sourceMappingURL=coins.spec.js.map