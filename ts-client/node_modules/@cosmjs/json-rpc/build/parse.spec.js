"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_1 = require("./parse");
const types_1 = require("./types");
describe("parse", () => {
    describe("parseJsonRpcId", () => {
        it("works for number IDs", () => {
            const request = {
                jsonrpc: "2.0",
                id: 123,
                method: "foo",
                params: {},
            };
            expect((0, parse_1.parseJsonRpcId)(request)).toEqual(123);
        });
        it("works for string IDs", () => {
            const request = {
                jsonrpc: "2.0",
                id: "329fg3b",
                method: "foo",
                params: {},
            };
            expect((0, parse_1.parseJsonRpcId)(request)).toEqual("329fg3b");
        });
        it("returns null for invaid IDs", () => {
            // unset
            {
                const request = {
                    jsonrpc: "2.0",
                    method: "foo",
                    params: {},
                };
                expect((0, parse_1.parseJsonRpcId)(request)).toBeNull();
            }
            // wrong type (object)
            {
                const request = {
                    jsonrpc: "2.0",
                    id: { content: 123 },
                    method: "foo",
                    params: {},
                };
                expect((0, parse_1.parseJsonRpcId)(request)).toBeNull();
            }
            // wrong type (Array)
            {
                const request = {
                    jsonrpc: "2.0",
                    id: [1, 2, 3],
                    method: "foo",
                    params: {},
                };
                expect((0, parse_1.parseJsonRpcId)(request)).toBeNull();
            }
            // wrong type (null)
            {
                const request = {
                    jsonrpc: "2.0",
                    id: null,
                    method: "foo",
                    params: {},
                };
                expect((0, parse_1.parseJsonRpcId)(request)).toBeNull();
            }
        });
    });
    describe("parseJsonRpcErrorResponse", () => {
        it("works for valid error", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                    data: [2, 3, 4],
                },
            };
            expect((0, parse_1.parseJsonRpcErrorResponse)(response)).toEqual(response);
        });
        it("works for error with string ID", () => {
            const response = {
                jsonrpc: "2.0",
                id: "a3g4g34g",
                error: {
                    code: types_1.jsonRpcCode.parseError,
                    message: "Could not parse request ID",
                },
            };
            expect((0, parse_1.parseJsonRpcErrorResponse)(response)).toEqual(response);
        });
        it("works for error with null ID", () => {
            const response = {
                jsonrpc: "2.0",
                id: null,
                error: {
                    code: types_1.jsonRpcCode.parseError,
                    message: "Could not parse request ID",
                },
            };
            expect((0, parse_1.parseJsonRpcErrorResponse)(response)).toEqual(response);
        });
        it("works for error with null data", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                    data: null,
                },
            };
            expect((0, parse_1.parseJsonRpcErrorResponse)(response)).toEqual(response);
        });
        it("works for error with unset data", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                },
            };
            expect((0, parse_1.parseJsonRpcErrorResponse)(response)).toEqual(response);
        });
        it("throws for invalid type", () => {
            const expectedError = /data must be JSON compatible dictionary/i;
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(undefined)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(null)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(false)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)("error")).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(42)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(() => true)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)({ foo: () => true })).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)({ foo: () => new Uint8Array([]) })).toThrowError(expectedError);
        });
        it("throws for invalid version", () => {
            // wrong type
            {
                const response = {
                    jsonrpc: 2.0,
                    id: 123,
                    error: {
                        code: types_1.jsonRpcCode.serverError.default,
                        message: "Something bad happened",
                    },
                };
                expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
            // wrong version
            {
                const response = {
                    jsonrpc: "1.0",
                    id: 123,
                    error: {
                        code: types_1.jsonRpcCode.serverError.default,
                        message: "Something bad happened",
                    },
                };
                expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
            // unset
            {
                const response = {
                    id: 123,
                    error: {
                        code: types_1.jsonRpcCode.serverError.default,
                        message: "Something bad happened",
                    },
                };
                expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
        });
        it("throws for invalid ID", () => {
            // wrong type
            {
                const response = {
                    jsonrpc: "2.0",
                    id: [1, 2, 3],
                    error: {
                        code: types_1.jsonRpcCode.serverError.default,
                        message: "Something bad happened",
                    },
                };
                expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/invalid id field/i);
            }
            // unset
            {
                const response = {
                    jsonrpc: "2.0",
                    error: {
                        code: types_1.jsonRpcCode.serverError.default,
                        message: "Something bad happened",
                    },
                };
                expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/invalid id field/i);
            }
        });
        it("throws for success response", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: 3000,
            };
            expect(() => (0, parse_1.parseJsonRpcErrorResponse)(response)).toThrowError(/invalid error field/i);
        });
    });
    describe("parseJsonRpcSuccessResponse", () => {
        it("works for response with dict result", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: {
                    foo: "bar",
                },
            };
            expect((0, parse_1.parseJsonRpcSuccessResponse)(response)).toEqual(response);
        });
        it("works for response with null result", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: null,
            };
            expect((0, parse_1.parseJsonRpcSuccessResponse)(response)).toEqual(response);
        });
        it("works for response with number ID", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: {},
            };
            expect((0, parse_1.parseJsonRpcSuccessResponse)(response)).toEqual(response);
        });
        it("works for response with string ID", () => {
            const response = {
                jsonrpc: "2.0",
                id: "40gfh408g",
                result: {},
            };
            expect((0, parse_1.parseJsonRpcSuccessResponse)(response)).toEqual(response);
        });
        it("throws for invalid type", () => {
            const expectedError = /data must be JSON compatible dictionary/i;
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(undefined)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(null)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(false)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)("success")).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(42)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(() => true)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)({ foo: () => true })).toThrowError(expectedError);
        });
        it("throws for invalid version", () => {
            // wrong type
            {
                const response = {
                    jsonrpc: 2.0,
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
            // wrong version
            {
                const response = {
                    jsonrpc: "1.0",
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
            // unset
            {
                const response = {
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/got unexpected jsonrpc version/i);
            }
        });
        it("throws for invalid ID", () => {
            // wrong type
            {
                const response = {
                    jsonrpc: "2.0",
                    id: [1, 2, 3],
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/invalid id field/i);
            }
            // wrong type
            {
                const response = {
                    jsonrpc: "2.0",
                    id: null,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/invalid id field/i);
            }
            // unset
            {
                const response = {
                    jsonrpc: "2.0",
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/invalid id field/i);
            }
        });
        it("throws for error response", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.parseError,
                    message: "Could not parse request ID",
                },
            };
            expect(() => (0, parse_1.parseJsonRpcSuccessResponse)(response)).toThrowError(/invalid result field/i);
        });
    });
    describe("parseJsonRpcResponse", () => {
        it("works for success response", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: 3000,
            };
            expect((0, parse_1.parseJsonRpcResponse)(response)).toEqual(response);
        });
        it("works for error response", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                    data: [2, 3, 4],
                },
            };
            expect((0, parse_1.parseJsonRpcResponse)(response)).toEqual(response);
        });
        it("favours error if response is error and success at the same time", () => {
            const response = {
                jsonrpc: "2.0",
                id: 123,
                result: 3000,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                },
            };
            expect((0, parse_1.parseJsonRpcResponse)(response)).toEqual({
                jsonrpc: "2.0",
                id: 123,
                error: {
                    code: types_1.jsonRpcCode.serverError.default,
                    message: "Something bad happened",
                },
            });
        });
        it("throws for invalid type", () => {
            const expectedError = /data must be JSON compatible dictionary/i;
            expect(() => (0, parse_1.parseJsonRpcResponse)(undefined)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)(null)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)(false)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)("error")).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)(42)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)(() => true)).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)({ foo: () => true })).toThrowError(expectedError);
            expect(() => (0, parse_1.parseJsonRpcResponse)({ foo: () => new Uint8Array([]) })).toThrowError(expectedError);
        });
        it("throws for invalid version", () => {
            const expectedError = /got unexpected jsonrpc version/i;
            // wrong type
            {
                const response = {
                    jsonrpc: 2.0,
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcResponse)(response)).toThrowError(expectedError);
            }
            // wrong version
            {
                const response = {
                    jsonrpc: "1.0",
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcResponse)(response)).toThrowError(expectedError);
            }
            // unset
            {
                const response = {
                    id: 123,
                    result: 3000,
                };
                expect(() => (0, parse_1.parseJsonRpcResponse)(response)).toThrowError(expectedError);
            }
        });
    });
});
//# sourceMappingURL=parse.spec.js.map