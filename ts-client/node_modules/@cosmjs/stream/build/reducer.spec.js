"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xstream_1 = require("xstream");
const reducer_1 = require("./reducer");
describe("Test stream helpers", () => {
    it("readIntoArray returns input", async () => {
        const input = [1, 6, 92, 2, 9];
        const stream = xstream_1.Stream.fromArray(input);
        const result = (0, reducer_1.asArray)(stream);
        await result.finished();
        expect(result.value()).toEqual(input);
        // also handle empty properly
        const result2 = (0, reducer_1.asArray)(xstream_1.Stream.empty());
        await result2.finished();
        expect(result2.value()).toEqual([]);
    });
    it("countStream returns number of items", async () => {
        const input = ["abc", "123", "def", "superstar!", "is"];
        const stream = xstream_1.Stream.fromArray(input);
        const result = (0, reducer_1.countStream)(stream);
        await result.finished();
        expect(result.value()).toEqual(input.length);
        // also handle empty properly
        const result2 = (0, reducer_1.countStream)(xstream_1.Stream.empty());
        await result2.finished();
        expect(result2.value()).toEqual(0);
    });
    it("lastValue returns input", async () => {
        const input = ["Some", "people", "say", "there", "is", "something"];
        const stream = xstream_1.Stream.fromArray(input);
        const result = (0, reducer_1.lastValue)(stream);
        await result.finished();
        expect(result.value()).toEqual("something");
        // also handle empty properly (undefined)
        const result2 = (0, reducer_1.lastValue)(xstream_1.Stream.empty());
        await result2.finished();
        expect(result2.value()).toBeUndefined();
    });
    it("Reducer.finished throws error on stream error", async () => {
        const stream = xstream_1.Stream.throw("error");
        try {
            const result = (0, reducer_1.asArray)(stream);
            await result.finished();
            fail("This should have thrown an error");
        }
        catch (err) {
            expect(err).toEqual("error");
        }
    });
});
//# sourceMappingURL=reducer.spec.js.map