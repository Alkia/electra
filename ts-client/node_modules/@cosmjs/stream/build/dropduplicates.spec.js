"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xstream_1 = require("xstream");
const dropduplicates_1 = require("./dropduplicates");
describe("dropDuplicates", () => {
    it("can be created", () => {
        const operand = (0, dropduplicates_1.dropDuplicates)((value) => `${value}`);
        expect(operand).toBeTruthy();
    });
    it("passes unique values", (done) => {
        const instream = xstream_1.Stream.fromArray([0, 1, 2, 3]);
        const operand = (0, dropduplicates_1.dropDuplicates)((value) => `${value}`);
        const events = new Array();
        instream.compose(operand).subscribe({
            next: (value) => events.push(value),
            complete: () => {
                expect(events).toEqual([0, 1, 2, 3]);
                done();
            },
        });
    });
    it("drops consecutive duplicates", (done) => {
        const instream = xstream_1.Stream.fromArray([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]);
        const operand = (0, dropduplicates_1.dropDuplicates)((value) => `${value}`);
        const events = new Array();
        instream.compose(operand).subscribe({
            next: (value) => events.push(value),
            complete: () => {
                expect(events).toEqual([1, 2, 3, 4]);
                done();
            },
        });
    });
    it("drops non-consecutive duplicates", (done) => {
        const instream = xstream_1.Stream.fromArray([1, 2, 3, 4, 3, 2, 1]);
        const operand = (0, dropduplicates_1.dropDuplicates)((value) => `${value}`);
        const events = new Array();
        instream.compose(operand).subscribe({
            next: (value) => events.push(value),
            complete: () => {
                expect(events).toEqual([1, 2, 3, 4]);
                done();
            },
        });
    });
    it("uses value to key method for duplicate checks", (done) => {
        const instream = xstream_1.Stream.fromArray([1, 10, 100, 2000, 2, 27, 1337, 3.14, 33]);
        // use first character of native string representation
        const valueToKey = (value) => `${value}`.charAt(0);
        const operand = (0, dropduplicates_1.dropDuplicates)(valueToKey);
        const events = new Array();
        instream.compose(operand).subscribe({
            next: (value) => events.push(value),
            complete: () => {
                expect(events).toEqual([1, 2000, 3.14]);
                done();
            },
        });
    });
    it("works for empty string keys", (done) => {
        const instream = xstream_1.Stream.fromArray([
            { first: "Daria", last: "" },
            { first: "Sam", last: "" },
            { first: "Regina", last: "Mustermann" },
            { first: "Max", last: "Mustermann" },
        ]);
        const operand = (0, dropduplicates_1.dropDuplicates)((value) => value.last);
        const events = new Array();
        instream.compose(operand).subscribe({
            next: (value) => events.push(value),
            complete: () => {
                expect(events).toEqual([
                    { first: "Daria", last: "" },
                    { first: "Regina", last: "Mustermann" },
                ]);
                done();
            },
        });
    });
});
//# sourceMappingURL=dropduplicates.spec.js.map